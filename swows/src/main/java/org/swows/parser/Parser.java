/*
 * Copyright (c) 2011 Miguel Ceriani
 * miguel.ceriani@gmail.com

 * This file is part of Semantic Web Open Web Server (SWOWS).

 * SWOWS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.

 * SWOWS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General
 * Public License along with SWOWS.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.swows.parser;

// This file was generated on Fri Nov 18, 2011 19:00 by REx v5.10 which is Copyright (c) 1979-2011 by Gunther Rademacher <grd@gmx.net>
// REx command line: SparqlExt.ebnf -tree -trace -main -java

/**
 * The Class Parser parses text files with a format derived
 * from SPARQL 1.1 text format and allowing full dataflow
 * specification.
 * It was generated by REx v5.10 which is Copyright (c) 1979-2011 by Gunther Rademacher <grd@gmx.net>
 */
public class Parser
{
  
  /**
   * The main method.
   *
   * @param args the arguments
   * @throws Exception the exception
   */
  public static void main(String args[]) throws Exception
  {
    if (args.length == 0)
    {
      System.out.println("Usage: java SparqlExt INPUT...");
      System.out.println();
      System.out.println("  parse INPUT, which is either a filename or literal text enclosed in curly braces\n");
    }
    else
    {
      for (String arg : args)
      {
        Parser parser = new Parser(read(arg));
        try
        {
          parser.writeTrace("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">\n<trace>\n");
          parser.writeOutput("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
          parser.parse_GraphDefinitionUnit();
          parser.writeTrace("</trace>\n");
          parser.flushTrace();
        }
        catch (ParseException pe)
        {
          throw new RuntimeException(parser.getErrorMessage(pe));
        }
      }
    }
  }

  /**
   * The Class ParseException.
   */
  public static class ParseException extends RuntimeException
  {
    private static final long serialVersionUID = 1L;
    private int begin, end, offending, expected, state;

    /**
     * Instantiates a new parses the exception.
     *
     * @param b the b
     * @param e the e
     * @param s the s
     * @param o the o
     * @param x the x
     */
    protected ParseException(int b, int e, int s, int o, int x)
    {
      begin = b;
      end = e;
      state = s;
      offending = o;
      expected = x;
    }

    /* (non-Javadoc)
     * @see java.lang.Throwable#getMessage()
     */
    @Override
	public String getMessage()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    }

    /**
     * Gets the begin.
     *
     * @return the begin
     */
    public int getBegin() {return begin;}
    
    /**
     * Gets the end.
     *
     * @return the end
     */
    public int getEnd() {return end;}
  }

  private static String read(String input) throws Exception
  {
    if (input.startsWith("{") && input.endsWith("}"))
    {
      return input.substring(1, input.length() - 1);
    }
    else
    {
      byte buffer[] = new byte[(int) new java.io.File(input).length()];
      new java.io.FileInputStream(input).read(buffer);
      String content = new String(buffer, System.getProperty("file.encoding"));
      return content.length() > 0 && content.charAt(0) == '\uFEFF'
           ? content.substring(1)
           : content;
    }
  }

  /**
   * Instantiates a new parser.
   *
   * @param string the string
   */
  public Parser(String string)
  {
    input = string;
    size = input.length();
    reset(0, 0, 0);
  }

  /**
   * Gets the input.
   *
   * @return the input
   */
  public String getInput()
  {
    return input;
  }

  /**
   * Gets the token offset.
   *
   * @return the token offset
   */
  public int getTokenOffset()
  {
    return b0;
  }

  /**
   * Gets the token end.
   *
   * @return the token end
   */
  public int getTokenEnd()
  {
    return e0;
  }

  /**
   * Reset.
   *
   * @param l the l
   * @param b the b
   * @param e the e
   */
  public final void reset(int l, int b, int e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    end = e;
    delayedTag = null;
  }

  /**
   * Reset.
   */
  public void reset()
  {
    reset(0, 0, 0);
  }

  /**
   * Gets the offending token.
   *
   * @param e the e
   * @return the offending token
   */
  public static String getOffendingToken(ParseException e)
  {
    return e.offending < 0 ? null : TOKEN[e.offending];
  }

  /**
   * Gets the expected token set.
   *
   * @param e the e
   * @return the expected token set
   */
  public static String[] getExpectedTokenSet(ParseException e)
  {
    String[] expected;
    if (e.expected < 0)
    {
      expected = getExpectedTokenSet(e.state);
    }
    else
    {
      expected = new String[]{TOKEN[e.expected]};
    }
    return expected;
  }

  /**
   * Gets the error message.
   *
   * @param e the e
   * @return the error message
   */
  public String getErrorMessage(ParseException e)
  {
    String[] tokenSet = getExpectedTokenSet(e);
    String found = getOffendingToken(e);
    String prefix = input.substring(0, e.getBegin());
    int line = prefix.replaceAll("[^\n]", "").length() + 1;
    int column = prefix.length() - prefix.lastIndexOf("\n");
    int size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : java.util.Arrays.toString(tokenSet))
         + "\n"
         + (size == 0 ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length(), e.getBegin() + 64))
         + "...";
  }

  /**
   * Parse_ graph definition unit.
   */
  public void parse_GraphDefinitionUnit()
  {
    startNonterminal("GraphDefinitionUnit");
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphDefinitionBlock();
    endNonterminal("GraphDefinitionUnit");
    flushOutput();
    flushTrace();
  }

  /**
   * Parse_ query.
   */
  public void parse_Query()
  {
    startNonterminal("Query");
    lookahead1W(5);                 // EPSILON | WS
    parse_Prologue();
    lookahead1W(64);                // WS | 'ASK' | 'CONSTRUCT' | 'DESCRIBE' | 'SELECT'
    switch (l1)
    {
    case 116:                       // 'SELECT'
      parse_SelectQuery();
      break;
    case 60:                        // 'CONSTRUCT'
      parse_ConstructQuery();
      break;
    case 72:                        // 'DESCRIBE'
      parse_DescribeQuery();
      break;
    default:
      parse_AskQuery();
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_BindingsClause();
    endNonterminal("Query");
    flushOutput();
    flushTrace();
  }

  /**
   * Parse_ update unit.
   */
  public void parse_UpdateUnit()
  {
    startNonterminal("UpdateUnit");
    lookahead1W(5);                 // EPSILON | WS
    parse_Update();
    endNonterminal("UpdateUnit");
    flushOutput();
    flushTrace();
  }

  private void parse_GraphDefinitionBlock()
  {
    startNonterminal("GraphDefinitionBlock");
    parse_Prologue();
    lookahead1W(5);                 // EPSILON | WS
    for (;;)
    {
      lookahead1W(5);               // EPSILON | WS
      parse_GraphDefinition();
      lookahead1W(29);              // END | WS | 'CONSTRUCT'
      if (l1 != 60)                 // 'CONSTRUCT'
      {
        break;
      }
    }
    endNonterminal("GraphDefinitionBlock");
  }

  private void parse_GraphDefinition()
  {
    startNonterminal("GraphDefinition");
    parse_GraphComposition();
    lookahead1W(18);                // WS | 'AS'
    shift(46);                      // 'AS'
    lookahead1W(21);                // WS | 'GRAPH'
    shift(80);                      // 'GRAPH'
    lookahead1W(49);                // IRI_REF | PNAME_NS | PNAME_LN | WS
    parse_IRIref();
    endNonterminal("GraphDefinition");
  }

  private void parse_GraphComposition()
  {
    startNonterminal("GraphComposition");
    parse_ConstructQuery();
    for (;;)
    {
      lookahead1W(41);              // WS | 'AS' | 'UNION'
      if (l1 != 138)                // 'UNION'
      {
        break;
      }
      shift(138);                   // 'UNION'
      lookahead1W(5);               // EPSILON | WS
      parse_ConstructQuery();
    }
    endNonterminal("GraphComposition");
  }

  private void parse_Prologue()
  {
    startNonterminal("Prologue");
    for (;;)
    {
      lookahead1W(100);             // END | WS | 'ADD' | 'ASK' | 'BASE' | 'CLEAR' | 'CONSTRUCT' | 'COPY' | 'CREATE' |
                                    // 'DELETE' | 'DELETE DATA' | 'DELETE WHERE' | 'DESCRIBE' | 'DROP' | 'INSERT' |
                                    // 'INSERT DATA' | 'LOAD' | 'MOVE' | 'PREFIX' | 'SELECT' | 'WITH'
      if (l1 != 50                  // 'BASE'
       && l1 != 109)                // 'PREFIX'
      {
        break;
      }
      switch (l1)
      {
      case 50:                      // 'BASE'
        parse_BaseDecl();
        break;
      default:
        parse_PrefixDecl();
      }
    }
    endNonterminal("Prologue");
  }

  private void parse_BaseDecl()
  {
    startNonterminal("BaseDecl");
    shift(50);                      // 'BASE'
    lookahead1W(8);                 // IRI_REF | WS
    shift(2);                       // IRI_REF
    endNonterminal("BaseDecl");
  }

  private void parse_PrefixDecl()
  {
    startNonterminal("PrefixDecl");
    shift(109);                     // 'PREFIX'
    lookahead1W(9);                 // PNAME_NS | WS
    shift(3);                       // PNAME_NS
    lookahead1W(8);                 // IRI_REF | WS
    shift(2);                       // IRI_REF
    endNonterminal("PrefixDecl");
  }

  private void parse_SelectQuery()
  {
    startNonterminal("SelectQuery");
    parse_SelectClause();
    for (;;)
    {
      lookahead1W(54);              // WS | 'FROM' | 'WHERE' | '{'
      if (l1 != 79)                 // 'FROM'
      {
        break;
      }
      parse_DatasetClause();
    }
    parse_WhereClause();
    lookahead1W(5);                 // EPSILON | WS
    parse_SolutionModifier();
    endNonterminal("SelectQuery");
  }

  private void parse_SubSelect()
  {
    startNonterminal("SubSelect");
    parse_SelectClause();
    lookahead1W(5);                 // EPSILON | WS
    parse_WhereClause();
    lookahead1W(5);                 // EPSILON | WS
    parse_SolutionModifier();
    endNonterminal("SubSelect");
  }

  private void parse_SelectClause()
  {
    startNonterminal("SelectClause");
    lookahead1(3);                  // 'SELECT'
    shift(116);                     // 'SELECT'
    lookahead1W(79);                // VAR1 | VAR2 | WS | '(' | '*' | 'DISTINCT' | 'REDUCED'
    if (l1 == 73                    // 'DISTINCT'
     || l1 == 111)                  // 'REDUCED'
    {
      switch (l1)
      {
      case 73:                      // 'DISTINCT'
        shift(73);                  // 'DISTINCT'
        break;
      default:
        shift(111);                 // 'REDUCED'
      }
    }
    lookahead1W(62);                // VAR1 | VAR2 | WS | '(' | '*'
    switch (l1)
    {
    case 30:                        // '*'
      shift(30);                    // '*'
      break;
    default:
      for (;;)
      {
        switch (l1)
        {
        case 28:                    // '('
          shift(28);                // '('
          lookahead1W(5);           // EPSILON | WS
          parse_Expression();
          lookahead1W(18);          // WS | 'AS'
          shift(46);                // 'AS'
          lookahead1W(31);          // VAR1 | VAR2 | WS
          parse_Var();
          lookahead1W(15);          // WS | ')'
          shift(29);                // ')'
          break;
        default:
          parse_Var();
        }
        lookahead1W(80);            // VAR1 | VAR2 | WS | '(' | 'FROM' | 'WHERE' | '{'
        if (l1 != 6                 // VAR1
         && l1 != 7                 // VAR2
         && l1 != 28)               // '('
        {
          break;
        }
      }
    }
    endNonterminal("SelectClause");
  }

  private void parse_ConstructQuery()
  {
    startNonterminal("ConstructQuery");
    lookahead1(1);                  // 'CONSTRUCT'
    shift(60);                      // 'CONSTRUCT'
    lookahead1W(54);                // WS | 'FROM' | 'WHERE' | '{'
    switch (l1)
    {
    case 157:                       // '{'
      parse_ConstructTemplate();
      for (;;)
      {
        lookahead1W(54);            // WS | 'FROM' | 'WHERE' | '{'
        if (l1 != 79)               // 'FROM'
        {
          break;
        }
        parse_DatasetClause();
      }
      parse_WhereClause();
      lookahead1W(5);               // EPSILON | WS
      parse_SolutionModifier();
      break;
    default:
      for (;;)
      {
        lookahead1W(43);            // WS | 'FROM' | 'WHERE'
        if (l1 != 79)               // 'FROM'
        {
          break;
        }
        parse_DatasetClause();
      }
      shift(141);                   // 'WHERE'
      lookahead1W(26);              // WS | '{'
      shift(157);                   // '{'
      lookahead1W(106);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | '[' | 'false' | 'true' | '}'
      if (l1 != 160)                // '}'
      {
        parse_TriplesTemplate();
      }
      lookahead1W(27);              // WS | '}'
      shift(160);                   // '}'
      lookahead1W(5);               // EPSILON | WS
      parse_SolutionModifier();
    }
    endNonterminal("ConstructQuery");
  }

  private void parse_DescribeQuery()
  {
    startNonterminal("DescribeQuery");
    shift(72);                      // 'DESCRIBE'
    lookahead1W(74);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '*'
    switch (l1)
    {
    case 30:                        // '*'
      shift(30);                    // '*'
      break;
    default:
      for (;;)
      {
        parse_VarOrIRIref();
        lookahead1W(96);            // END | IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | 'BINDINGS' | 'FROM' |
                                    // 'GROUP' | 'HAVING' | 'LIMIT' | 'OFFSET' | 'ORDER' | 'WHERE' | '{'
        if (l1 != 2                 // IRI_REF
         && l1 != 3                 // PNAME_NS
         && l1 != 4                 // PNAME_LN
         && l1 != 6                 // VAR1
         && l1 != 7)                // VAR2
        {
          break;
        }
      }
    }
    for (;;)
    {
      lookahead1W(90);              // END | WS | 'BINDINGS' | 'FROM' | 'GROUP' | 'HAVING' | 'LIMIT' | 'OFFSET' |
                                    // 'ORDER' | 'WHERE' | '{'
      if (l1 != 79)                 // 'FROM'
      {
        break;
      }
      parse_DatasetClause();
    }
    if (l1 == 141                   // 'WHERE'
     || l1 == 157)                  // '{'
    {
      parse_WhereClause();
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_SolutionModifier();
    endNonterminal("DescribeQuery");
  }

  private void parse_AskQuery()
  {
    startNonterminal("AskQuery");
    shift(48);                      // 'ASK'
    for (;;)
    {
      lookahead1W(54);              // WS | 'FROM' | 'WHERE' | '{'
      if (l1 != 79)                 // 'FROM'
      {
        break;
      }
      parse_DatasetClause();
    }
    parse_WhereClause();
    endNonterminal("AskQuery");
  }

  private void parse_DatasetClause()
  {
    startNonterminal("DatasetClause");
    shift(79);                      // 'FROM'
    lookahead1W(58);                // IRI_REF | PNAME_NS | PNAME_LN | WS | 'NAMED'
    switch (l1)
    {
    case 103:                       // 'NAMED'
      parse_NamedGraphClause();
      break;
    default:
      parse_DefaultGraphClause();
    }
    endNonterminal("DatasetClause");
  }

  private void parse_DefaultGraphClause()
  {
    startNonterminal("DefaultGraphClause");
    parse_SourceSelector();
    endNonterminal("DefaultGraphClause");
  }

  private void parse_NamedGraphClause()
  {
    startNonterminal("NamedGraphClause");
    shift(103);                     // 'NAMED'
    lookahead1W(49);                // IRI_REF | PNAME_NS | PNAME_LN | WS
    parse_SourceSelector();
    endNonterminal("NamedGraphClause");
  }

  private void parse_SourceSelector()
  {
    startNonterminal("SourceSelector");
    parse_IRIref();
    endNonterminal("SourceSelector");
  }

  private void parse_WhereClause()
  {
    startNonterminal("WhereClause");
    lookahead1W(47);                // WS | 'WHERE' | '{'
    if (l1 == 141)                  // 'WHERE'
    {
      shift(141);                   // 'WHERE'
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("WhereClause");
  }

  private void parse_SolutionModifier()
  {
    startNonterminal("SolutionModifier");
    lookahead1W(89);                // END | WS | 'AS' | 'BINDINGS' | 'GROUP' | 'HAVING' | 'LIMIT' | 'OFFSET' |
                                    // 'ORDER' | 'UNION' | '}'
    if (l1 == 81)                   // 'GROUP'
    {
      parse_GroupClause();
    }
    lookahead1W(86);                // END | WS | 'AS' | 'BINDINGS' | 'HAVING' | 'LIMIT' | 'OFFSET' | 'ORDER' |
                                    // 'UNION' | '}'
    if (l1 == 83)                   // 'HAVING'
    {
      parse_HavingClause();
    }
    lookahead1W(83);                // END | WS | 'AS' | 'BINDINGS' | 'LIMIT' | 'OFFSET' | 'ORDER' | 'UNION' | '}'
    if (l1 == 108)                  // 'ORDER'
    {
      parse_OrderClause();
    }
    lookahead1W(82);                // END | WS | 'AS' | 'BINDINGS' | 'LIMIT' | 'OFFSET' | 'UNION' | '}'
    if (l1 == 94                    // 'LIMIT'
     || l1 == 106)                  // 'OFFSET'
    {
      parse_LimitOffsetClauses();
    }
    endNonterminal("SolutionModifier");
  }

  private void parse_GroupClause()
  {
    startNonterminal("GroupClause");
    shift(81);                      // 'GROUP'
    lookahead1W(19);                // WS | 'BY'
    shift(55);                      // 'BY'
    lookahead1W(5);                 // EPSILON | WS
    for (;;)
    {
      lookahead1W(5);               // EPSILON | WS
      parse_GroupCondition();
      lookahead1W(123);             // END | IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '(' | 'ABS' | 'AS' |
                                    // 'BINDINGS' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'DATATYPE' | 'DAY' | 'ENCODE_FOR_URI' | 'EXISTS' | 'FLOOR' | 'HAVING' | 'HOURS' |
                                    // 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' | 'LCASE' | 'LIMIT' | 'MD5' | 'MINUTES' |
                                    // 'MONTH' | 'NOT' | 'NOW' | 'OFFSET' | 'ORDER' | 'RAND' | 'REGEX' | 'ROUND' |
                                    // 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' | 'SHA512' | 'STR' |
                                    // 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' | 'STRSTARTS' | 'SUBSTR' |
                                    // 'TIMEZONE' | 'TZ' | 'UCASE' | 'UNION' | 'URI' | 'YEAR' | 'isBLANK' | 'isIRI' |
                                    // 'isLITERAL' | 'isNUMERIC' | 'isURI' | 'sameTerm' | '}'
      if (l1 == 1                   // END
       || l1 == 46                  // 'AS'
       || l1 == 52                  // 'BINDINGS'
       || l1 == 83                  // 'HAVING'
       || l1 == 94                  // 'LIMIT'
       || l1 == 106                 // 'OFFSET'
       || l1 == 108                 // 'ORDER'
       || l1 == 138                 // 'UNION'
       || l1 == 160)                // '}'
      {
        break;
      }
    }
    endNonterminal("GroupClause");
  }

  private void parse_GroupCondition()
  {
    startNonterminal("GroupCondition");
    lookahead1(118);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | '(' | 'ABS' | 'BNODE' | 'BOUND' |
                                    // 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' | 'DATATYPE' | 'DAY' |
                                    // 'ENCODE_FOR_URI' | 'EXISTS' | 'FLOOR' | 'HOURS' | 'IF' | 'IRI' | 'LANG' |
                                    // 'LANGMATCHES' | 'LCASE' | 'MD5' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' |
                                    // 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' | 'STRSTARTS' |
                                    // 'SUBSTR' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' | 'isBLANK' | 'isIRI' |
                                    // 'isLITERAL' | 'isNUMERIC' | 'isURI' | 'sameTerm'
    switch (l1)
    {
    case 2:                         // IRI_REF
    case 3:                         // PNAME_NS
    case 4:                         // PNAME_LN
      parse_FunctionCall();
      break;
    case 28:                        // '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(37);              // WS | ')' | 'AS'
      if (l1 == 46)                 // 'AS'
      {
        shift(46);                  // 'AS'
        lookahead1W(31);            // VAR1 | VAR2 | WS
        parse_Var();
      }
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 6:                         // VAR1
    case 7:                         // VAR2
      parse_Var();
      break;
    default:
      parse_BuiltInCall();
    }
    endNonterminal("GroupCondition");
  }

  private void parse_HavingClause()
  {
    startNonterminal("HavingClause");
    shift(83);                      // 'HAVING'
    lookahead1W(5);                 // EPSILON | WS
    for (;;)
    {
      lookahead1W(5);               // EPSILON | WS
      parse_HavingCondition();
      lookahead1W(121);             // END | IRI_REF | PNAME_NS | PNAME_LN | WS | '(' | 'ABS' | 'AS' | 'BINDINGS' |
                                    // 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' | 'DATATYPE' |
                                    // 'DAY' | 'ENCODE_FOR_URI' | 'EXISTS' | 'FLOOR' | 'HOURS' | 'IF' | 'IRI' | 'LANG' |
                                    // 'LANGMATCHES' | 'LCASE' | 'LIMIT' | 'MD5' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' |
                                    // 'OFFSET' | 'ORDER' | 'RAND' | 'REGEX' | 'ROUND' | 'SECONDS' | 'SHA1' | 'SHA224' |
                                    // 'SHA256' | 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' |
                                    // 'STRLEN' | 'STRSTARTS' | 'SUBSTR' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'UNION' |
                                    // 'URI' | 'YEAR' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | '}'
      if (l1 == 1                   // END
       || l1 == 46                  // 'AS'
       || l1 == 52                  // 'BINDINGS'
       || l1 == 94                  // 'LIMIT'
       || l1 == 106                 // 'OFFSET'
       || l1 == 108                 // 'ORDER'
       || l1 == 138                 // 'UNION'
       || l1 == 160)                // '}'
      {
        break;
      }
    }
    endNonterminal("HavingClause");
  }

  private void parse_HavingCondition()
  {
    startNonterminal("HavingCondition");
    parse_Constraint();
    endNonterminal("HavingCondition");
  }

  private void parse_OrderClause()
  {
    startNonterminal("OrderClause");
    shift(108);                     // 'ORDER'
    lookahead1W(19);                // WS | 'BY'
    shift(55);                      // 'BY'
    lookahead1W(5);                 // EPSILON | WS
    for (;;)
    {
      lookahead1W(5);               // EPSILON | WS
      parse_OrderCondition();
      lookahead1W(122);             // END | IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '(' | 'ABS' | 'AS' |
                                    // 'ASC' | 'BINDINGS' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' |
                                    // 'CONTAINS' | 'DATATYPE' | 'DAY' | 'DESC' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' | 'LCASE' | 'LIMIT' |
                                    // 'MD5' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'OFFSET' | 'RAND' | 'REGEX' |
                                    // 'ROUND' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' | 'SHA512' |
                                    // 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' | 'STRSTARTS' | 'SUBSTR' |
                                    // 'TIMEZONE' | 'TZ' | 'UCASE' | 'UNION' | 'URI' | 'YEAR' | 'isBLANK' | 'isIRI' |
                                    // 'isLITERAL' | 'isNUMERIC' | 'isURI' | 'sameTerm' | '}'
      if (l1 == 1                   // END
       || l1 == 46                  // 'AS'
       || l1 == 52                  // 'BINDINGS'
       || l1 == 94                  // 'LIMIT'
       || l1 == 106                 // 'OFFSET'
       || l1 == 138                 // 'UNION'
       || l1 == 160)                // '}'
      {
        break;
      }
    }
    endNonterminal("OrderClause");
  }

  private void parse_OrderCondition()
  {
    startNonterminal("OrderCondition");
    lookahead1(119);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | '(' | 'ABS' | 'ASC' | 'BNODE' |
                                    // 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' | 'DATATYPE' | 'DAY' |
                                    // 'DESC' | 'ENCODE_FOR_URI' | 'EXISTS' | 'FLOOR' | 'HOURS' | 'IF' | 'IRI' |
                                    // 'LANG' | 'LANGMATCHES' | 'LCASE' | 'MD5' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' |
                                    // 'RAND' | 'REGEX' | 'ROUND' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' | 'sameTerm'
    switch (l1)
    {
    case 47:                        // 'ASC'
    case 71:                        // 'DESC'
      switch (l1)
      {
      case 47:                      // 'ASC'
        shift(47);                  // 'ASC'
        break;
      default:
        shift(71);                  // 'DESC'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_BrackettedExpression();
      break;
    default:
      switch (l1)
      {
      case 6:                       // VAR1
      case 7:                       // VAR2
        parse_Var();
        break;
      default:
        parse_Constraint();
      }
    }
    endNonterminal("OrderCondition");
  }

  private void parse_LimitOffsetClauses()
  {
    startNonterminal("LimitOffsetClauses");
    switch (l1)
    {
    case 94:                        // 'LIMIT'
      parse_LimitClause();
      lookahead1W(73);              // END | WS | 'AS' | 'BINDINGS' | 'OFFSET' | 'UNION' | '}'
      if (l1 == 106)                // 'OFFSET'
      {
        parse_OffsetClause();
      }
      break;
    default:
      parse_OffsetClause();
      lookahead1W(72);              // END | WS | 'AS' | 'BINDINGS' | 'LIMIT' | 'UNION' | '}'
      if (l1 == 94)                 // 'LIMIT'
      {
        parse_LimitClause();
      }
    }
    endNonterminal("LimitOffsetClauses");
  }

  private void parse_LimitClause()
  {
    startNonterminal("LimitClause");
    shift(94);                      // 'LIMIT'
    lookahead1W(11);                // INTEGER | WS
    shift(9);                       // INTEGER
    endNonterminal("LimitClause");
  }

  private void parse_OffsetClause()
  {
    startNonterminal("OffsetClause");
    shift(106);                     // 'OFFSET'
    lookahead1W(11);                // INTEGER | WS
    shift(9);                       // INTEGER
    endNonterminal("OffsetClause");
  }

  private void parse_BindingsClause()
  {
    startNonterminal("BindingsClause");
    lookahead1(7);                  // END | 'BINDINGS'
    if (l1 == 52)                   // 'BINDINGS'
    {
      shift(52);                    // 'BINDINGS'
      for (;;)
      {
        lookahead1W(50);            // VAR1 | VAR2 | WS | '{'
        if (l1 == 157)              // '{'
        {
          break;
        }
        parse_Var();
      }
      shift(157);                   // '{'
      for (;;)
      {
        lookahead1W(52);            // NIL | WS | '(' | '}'
        if (l1 == 160)              // '}'
        {
          break;
        }
        switch (l1)
        {
        case 28:                    // '('
          shift(28);                // '('
          for (;;)
          {
            lookahead1W(101);       // IRI_REF | PNAME_NS | PNAME_LN | INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE |
                                    // DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE |
                                    // DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 |
                                    // STRING_LITERAL_LONG2 | WS | ')' | 'UNDEF' | 'false' | 'true'
            if (l1 == 29)           // ')'
            {
              break;
            }
            parse_BindingValue();
          }
          shift(29);                // ')'
          break;
        default:
          shift(22);                // NIL
        }
      }
      shift(160);                   // '}'
    }
    endNonterminal("BindingsClause");
  }

  private void parse_BindingValue()
  {
    startNonterminal("BindingValue");
    switch (l1)
    {
    case 2:                         // IRI_REF
    case 3:                         // PNAME_NS
    case 4:                         // PNAME_LN
      parse_IRIref();
      break;
    case 18:                        // STRING_LITERAL1
    case 19:                        // STRING_LITERAL2
    case 20:                        // STRING_LITERAL_LONG1
    case 21:                        // STRING_LITERAL_LONG2
      parse_RDFLiteral();
      break;
    case 149:                       // 'false'
    case 156:                       // 'true'
      parse_BooleanLiteral();
      break;
    case 137:                       // 'UNDEF'
      shift(137);                   // 'UNDEF'
      break;
    default:
      parse_NumericLiteral();
    }
    endNonterminal("BindingValue");
  }

  private void parse_Update()
  {
    startNonterminal("Update");
    parse_Prologue();
    lookahead1W(94);                // END | WS | 'ADD' | 'CLEAR' | 'COPY' | 'CREATE' | 'DELETE' | 'DELETE DATA' |
                                    // 'DELETE WHERE' | 'DROP' | 'INSERT' | 'INSERT DATA' | 'LOAD' | 'MOVE' | 'WITH'
    if (l1 != 1)                    // END
    {
      parse_Update1();
      lookahead1W(28);              // END | WS | ';'
      if (l1 == 36)                 // ';'
      {
        shift(36);                  // ';'
        lookahead1W(5);             // EPSILON | WS
        parse_Update();
      }
    }
    endNonterminal("Update");
  }

  private void parse_Update1()
  {
    startNonterminal("Update1");
    switch (l1)
    {
    case 95:                        // 'LOAD'
      parse_Load();
      break;
    case 57:                        // 'CLEAR'
      parse_Clear();
      break;
    case 74:                        // 'DROP'
      parse_Drop();
      break;
    case 44:                        // 'ADD'
      parse_Add();
      break;
    case 102:                       // 'MOVE'
      parse_Move();
      break;
    case 62:                        // 'COPY'
      parse_Copy();
      break;
    case 64:                        // 'CREATE'
      parse_Create();
      break;
    case 88:                        // 'INSERT DATA'
      parse_InsertData();
      break;
    case 69:                        // 'DELETE DATA'
      parse_DeleteData();
      break;
    case 70:                        // 'DELETE WHERE'
      parse_DeleteWhere();
      break;
    default:
      parse_Modify();
    }
    endNonterminal("Update1");
  }

  private void parse_Load()
  {
    startNonterminal("Load");
    shift(95);                      // 'LOAD'
    lookahead1W(59);                // IRI_REF | PNAME_NS | PNAME_LN | WS | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(49);                // IRI_REF | PNAME_NS | PNAME_LN | WS
    parse_IRIref();
    lookahead1W(48);                // END | WS | ';' | 'INTO'
    if (l1 == 89)                   // 'INTO'
    {
      shift(89);                    // 'INTO'
      lookahead1W(5);               // EPSILON | WS
      parse_GraphRef();
    }
    endNonterminal("Load");
  }

  private void parse_Clear()
  {
    startNonterminal("Clear");
    shift(57);                      // 'CLEAR'
    lookahead1W(71);                // WS | 'ALL' | 'DEFAULT' | 'GRAPH' | 'NAMED' | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphRefAll();
    endNonterminal("Clear");
  }

  private void parse_Drop()
  {
    startNonterminal("Drop");
    shift(74);                      // 'DROP'
    lookahead1W(71);                // WS | 'ALL' | 'DEFAULT' | 'GRAPH' | 'NAMED' | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphRefAll();
    endNonterminal("Drop");
  }

  private void parse_Create()
  {
    startNonterminal("Create");
    shift(64);                      // 'CREATE'
    lookahead1W(44);                // WS | 'GRAPH' | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphRef();
    endNonterminal("Create");
  }

  private void parse_Add()
  {
    startNonterminal("Add");
    shift(44);                      // 'ADD'
    lookahead1W(77);                // IRI_REF | PNAME_NS | PNAME_LN | WS | 'DEFAULT' | 'GRAPH' | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphOrDefault();
    lookahead1W(24);                // WS | 'TO'
    shift(134);                     // 'TO'
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphOrDefault();
    endNonterminal("Add");
  }

  private void parse_Move()
  {
    startNonterminal("Move");
    shift(102);                     // 'MOVE'
    lookahead1W(77);                // IRI_REF | PNAME_NS | PNAME_LN | WS | 'DEFAULT' | 'GRAPH' | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphOrDefault();
    lookahead1W(24);                // WS | 'TO'
    shift(134);                     // 'TO'
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphOrDefault();
    endNonterminal("Move");
  }

  private void parse_Copy()
  {
    startNonterminal("Copy");
    shift(62);                      // 'COPY'
    lookahead1W(77);                // IRI_REF | PNAME_NS | PNAME_LN | WS | 'DEFAULT' | 'GRAPH' | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphOrDefault();
    lookahead1W(24);                // WS | 'TO'
    shift(134);                     // 'TO'
    lookahead1W(5);                 // EPSILON | WS
    parse_GraphOrDefault();
    endNonterminal("Copy");
  }

  private void parse_InsertData()
  {
    startNonterminal("InsertData");
    shift(88);                      // 'INSERT DATA'
    lookahead1W(5);                 // EPSILON | WS
    parse_QuadData();
    endNonterminal("InsertData");
  }

  private void parse_DeleteData()
  {
    startNonterminal("DeleteData");
    shift(69);                      // 'DELETE DATA'
    lookahead1W(5);                 // EPSILON | WS
    parse_QuadData();
    endNonterminal("DeleteData");
  }

  private void parse_DeleteWhere()
  {
    startNonterminal("DeleteWhere");
    shift(70);                      // 'DELETE WHERE'
    lookahead1W(5);                 // EPSILON | WS
    parse_QuadPattern();
    endNonterminal("DeleteWhere");
  }

  private void parse_Modify()
  {
    startNonterminal("Modify");
    if (l1 == 142)                  // 'WITH'
    {
      shift(142);                   // 'WITH'
      lookahead1W(49);              // IRI_REF | PNAME_NS | PNAME_LN | WS
      parse_IRIref();
    }
    lookahead1W(42);                // WS | 'DELETE' | 'INSERT'
    switch (l1)
    {
    case 68:                        // 'DELETE'
      parse_DeleteClause();
      lookahead1W(55);              // WS | 'INSERT' | 'USING' | 'WHERE'
      if (l1 == 87)                 // 'INSERT'
      {
        parse_InsertClause();
      }
      break;
    default:
      parse_InsertClause();
    }
    for (;;)
    {
      lookahead1W(46);              // WS | 'USING' | 'WHERE'
      if (l1 != 140)                // 'USING'
      {
        break;
      }
      parse_UsingClause();
    }
    shift(141);                     // 'WHERE'
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("Modify");
  }

  private void parse_DeleteClause()
  {
    startNonterminal("DeleteClause");
    shift(68);                      // 'DELETE'
    lookahead1W(5);                 // EPSILON | WS
    parse_QuadPattern();
    endNonterminal("DeleteClause");
  }

  private void parse_InsertClause()
  {
    startNonterminal("InsertClause");
    shift(87);                      // 'INSERT'
    lookahead1W(5);                 // EPSILON | WS
    parse_QuadPattern();
    endNonterminal("InsertClause");
  }

  private void parse_UsingClause()
  {
    startNonterminal("UsingClause");
    shift(140);                     // 'USING'
    lookahead1W(58);                // IRI_REF | PNAME_NS | PNAME_LN | WS | 'NAMED'
    switch (l1)
    {
    case 103:                       // 'NAMED'
      shift(103);                   // 'NAMED'
      lookahead1W(49);              // IRI_REF | PNAME_NS | PNAME_LN | WS
      parse_IRIref();
      break;
    default:
      parse_IRIref();
    }
    endNonterminal("UsingClause");
  }

  private void parse_GraphOrDefault()
  {
    startNonterminal("GraphOrDefault");
    lookahead1W(67);                // IRI_REF | PNAME_NS | PNAME_LN | WS | 'DEFAULT' | 'GRAPH'
    switch (l1)
    {
    case 67:                        // 'DEFAULT'
      shift(67);                    // 'DEFAULT'
      break;
    default:
      if (l1 == 80)                 // 'GRAPH'
      {
        shift(80);                  // 'GRAPH'
      }
      lookahead1W(49);              // IRI_REF | PNAME_NS | PNAME_LN | WS
      parse_IRIref();
    }
    endNonterminal("GraphOrDefault");
  }

  private void parse_GraphRef()
  {
    startNonterminal("GraphRef");
    lookahead1(2);                  // 'GRAPH'
    shift(80);                      // 'GRAPH'
    lookahead1W(49);                // IRI_REF | PNAME_NS | PNAME_LN | WS
    parse_IRIref();
    endNonterminal("GraphRef");
  }

  private void parse_GraphRefAll()
  {
    startNonterminal("GraphRefAll");
    lookahead1(56);                 // 'ALL' | 'DEFAULT' | 'GRAPH' | 'NAMED'
    switch (l1)
    {
    case 80:                        // 'GRAPH'
      parse_GraphRef();
      break;
    case 67:                        // 'DEFAULT'
      shift(67);                    // 'DEFAULT'
      break;
    case 103:                       // 'NAMED'
      shift(103);                   // 'NAMED'
      break;
    default:
      shift(45);                    // 'ALL'
    }
    endNonterminal("GraphRefAll");
  }

  private void parse_QuadPattern()
  {
    startNonterminal("QuadPattern");
    lookahead1(4);                  // '{'
    shift(157);                     // '{'
    lookahead1W(5);                 // EPSILON | WS
    parse_Quads();
    lookahead1W(27);                // WS | '}'
    shift(160);                     // '}'
    endNonterminal("QuadPattern");
  }

  private void parse_QuadData()
  {
    startNonterminal("QuadData");
    lookahead1(4);                  // '{'
    shift(157);                     // '{'
    lookahead1W(5);                 // EPSILON | WS
    parse_Quads();
    lookahead1W(27);                // WS | '}'
    shift(160);                     // '}'
    endNonterminal("QuadData");
  }

  private void parse_Quads()
  {
    startNonterminal("Quads");
    lookahead1W(109);               // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | 'GRAPH' | '[' | 'false' | 'true' | '}'
    if (l1 != 80                    // 'GRAPH'
     && l1 != 160)                  // '}'
    {
      parse_TriplesTemplate();
    }
    for (;;)
    {
      lookahead1W(45);              // WS | 'GRAPH' | '}'
      if (l1 != 80)                 // 'GRAPH'
      {
        break;
      }
      parse_QuadsNotTriples();
      lookahead1W(111);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | '.' | 'GRAPH' | '[' | 'false' | 'true' | '}'
      if (l1 == 34)                 // '.'
      {
        shift(34);                  // '.'
      }
      lookahead1W(109);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | 'GRAPH' | '[' | 'false' | 'true' | '}'
      if (l1 != 80                  // 'GRAPH'
       && l1 != 160)                // '}'
      {
        parse_TriplesTemplate();
      }
    }
    endNonterminal("Quads");
  }

  private void parse_QuadsNotTriples()
  {
    startNonterminal("QuadsNotTriples");
    shift(80);                      // 'GRAPH'
    lookahead1W(65);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS
    parse_VarOrIRIref();
    lookahead1W(26);                // WS | '{'
    shift(157);                     // '{'
    lookahead1W(106);               // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | '[' | 'false' | 'true' | '}'
    if (l1 != 160)                  // '}'
    {
      parse_TriplesTemplate();
    }
    lookahead1W(27);                // WS | '}'
    shift(160);                     // '}'
    endNonterminal("QuadsNotTriples");
  }

  private void parse_TriplesTemplate()
  {
    startNonterminal("TriplesTemplate");
    parse_TriplesSameSubject();
    lookahead1W(53);                // WS | '.' | 'GRAPH' | '}'
    if (l1 == 34)                   // '.'
    {
      shift(34);                    // '.'
      lookahead1W(109);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | 'GRAPH' | '[' | 'false' | 'true' | '}'
      if (l1 != 80                  // 'GRAPH'
       && l1 != 160)                // '}'
      {
        parse_TriplesTemplate();
      }
    }
    endNonterminal("TriplesTemplate");
  }

  private void parse_GroupGraphPattern()
  {
    startNonterminal("GroupGraphPattern");
    lookahead1(4);                  // '{'
    shift(157);                     // '{'
    lookahead1W(115);               // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SELECT' | 'SERVICE' |
                                    // '[' | 'false' | 'true' | '{' | '}'
    switch (l1)
    {
    case 116:                       // 'SELECT'
      parse_SubSelect();
      break;
    default:
      parse_GroupGraphPatternSub();
    }
    lookahead1W(27);                // WS | '}'
    shift(160);                     // '}'
    endNonterminal("GroupGraphPattern");
  }

  private void parse_GroupGraphPatternSub()
  {
    startNonterminal("GroupGraphPatternSub");
    if (l1 != 51                    // 'BIND'
     && l1 != 77                    // 'FILTER'
     && l1 != 80                    // 'GRAPH'
     && l1 != 99                    // 'MINUS'
     && l1 != 107                   // 'OPTIONAL'
     && l1 != 118                   // 'SERVICE'
     && l1 != 157                   // '{'
     && l1 != 160)                  // '}'
    {
      parse_TriplesBlock();
    }
    for (;;)
    {
      lookahead1W(85);              // WS | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' | '{' | '}'
      if (l1 == 160)                // '}'
      {
        break;
      }
      parse_GraphPatternNotTriples();
      lookahead1W(114);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | '.' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' |
                                    // '[' | 'false' | 'true' | '{' | '}'
      if (l1 == 34)                 // '.'
      {
        shift(34);                  // '.'
      }
      lookahead1W(113);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' | '[' |
                                    // 'false' | 'true' | '{' | '}'
      if (l1 != 51                  // 'BIND'
       && l1 != 77                  // 'FILTER'
       && l1 != 80                  // 'GRAPH'
       && l1 != 99                  // 'MINUS'
       && l1 != 107                 // 'OPTIONAL'
       && l1 != 118                 // 'SERVICE'
       && l1 != 157                 // '{'
       && l1 != 160)                // '}'
      {
        parse_TriplesBlock();
      }
    }
    endNonterminal("GroupGraphPatternSub");
  }

  private void parse_TriplesBlock()
  {
    startNonterminal("TriplesBlock");
    parse_TriplesSameSubjectPath();
    lookahead1W(88);                // WS | '.' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' | '{' |
                                    // '}'
    if (l1 == 34)                   // '.'
    {
      shift(34);                    // '.'
      lookahead1W(113);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' | '[' |
                                    // 'false' | 'true' | '{' | '}'
      if (l1 != 51                  // 'BIND'
       && l1 != 77                  // 'FILTER'
       && l1 != 80                  // 'GRAPH'
       && l1 != 99                  // 'MINUS'
       && l1 != 107                 // 'OPTIONAL'
       && l1 != 118                 // 'SERVICE'
       && l1 != 157                 // '{'
       && l1 != 160)                // '}'
      {
        parse_TriplesBlock();
      }
    }
    endNonterminal("TriplesBlock");
  }

  private void parse_GraphPatternNotTriples()
  {
    startNonterminal("GraphPatternNotTriples");
    switch (l1)
    {
    case 157:                       // '{'
      parse_GroupOrUnionGraphPattern();
      break;
    case 107:                       // 'OPTIONAL'
      parse_OptionalGraphPattern();
      break;
    case 99:                        // 'MINUS'
      parse_MinusGraphPattern();
      break;
    case 80:                        // 'GRAPH'
      parse_GraphGraphPattern();
      break;
    case 118:                       // 'SERVICE'
      parse_ServiceGraphPattern();
      break;
    case 77:                        // 'FILTER'
      parse_Filter();
      break;
    default:
      parse_Bind();
    }
    endNonterminal("GraphPatternNotTriples");
  }

  private void parse_OptionalGraphPattern()
  {
    startNonterminal("OptionalGraphPattern");
    shift(107);                     // 'OPTIONAL'
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("OptionalGraphPattern");
  }

  private void parse_GraphGraphPattern()
  {
    startNonterminal("GraphGraphPattern");
    shift(80);                      // 'GRAPH'
    lookahead1W(65);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS
    parse_VarOrIRIref();
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("GraphGraphPattern");
  }

  private void parse_ServiceGraphPattern()
  {
    startNonterminal("ServiceGraphPattern");
    shift(118);                     // 'SERVICE'
    lookahead1W(75);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | 'SILENT'
    if (l1 == 124)                  // 'SILENT'
    {
      shift(124);                   // 'SILENT'
    }
    lookahead1W(65);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS
    parse_VarOrIRIref();
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("ServiceGraphPattern");
  }

  private void parse_Bind()
  {
    startNonterminal("Bind");
    shift(51);                      // 'BIND'
    lookahead1W(14);                // WS | '('
    shift(28);                      // '('
    lookahead1W(5);                 // EPSILON | WS
    parse_Expression();
    lookahead1W(18);                // WS | 'AS'
    shift(46);                      // 'AS'
    lookahead1W(31);                // VAR1 | VAR2 | WS
    parse_Var();
    lookahead1W(15);                // WS | ')'
    shift(29);                      // ')'
    endNonterminal("Bind");
  }

  private void parse_MinusGraphPattern()
  {
    startNonterminal("MinusGraphPattern");
    shift(99);                      // 'MINUS'
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("MinusGraphPattern");
  }

  private void parse_GroupOrUnionGraphPattern()
  {
    startNonterminal("GroupOrUnionGraphPattern");
    parse_GroupGraphPattern();
    for (;;)
    {
      lookahead1W(116);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | '.' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' |
                                    // 'UNION' | '[' | 'false' | 'true' | '{' | '}'
      if (l1 != 138)                // 'UNION'
      {
        break;
      }
      shift(138);                   // 'UNION'
      lookahead1W(5);               // EPSILON | WS
      parse_GroupGraphPattern();
    }
    endNonterminal("GroupOrUnionGraphPattern");
  }

  private void parse_Filter()
  {
    startNonterminal("Filter");
    shift(77);                      // 'FILTER'
    lookahead1W(5);                 // EPSILON | WS
    parse_Constraint();
    endNonterminal("Filter");
  }

  private void parse_Constraint()
  {
    startNonterminal("Constraint");
    lookahead1(117);                // IRI_REF | PNAME_NS | PNAME_LN | '(' | 'ABS' | 'BNODE' | 'BOUND' | 'CEIL' |
                                    // 'COALESCE' | 'CONCAT' | 'CONTAINS' | 'DATATYPE' | 'DAY' | 'ENCODE_FOR_URI' |
                                    // 'EXISTS' | 'FLOOR' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' | 'LCASE' |
                                    // 'MD5' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' | 'REGEX' | 'ROUND' |
                                    // 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' | 'SHA512' | 'STR' |
                                    // 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' | 'STRSTARTS' | 'SUBSTR' |
                                    // 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' | 'isBLANK' | 'isIRI' |
                                    // 'isLITERAL' | 'isNUMERIC' | 'isURI' | 'sameTerm'
    switch (l1)
    {
    case 28:                        // '('
      parse_BrackettedExpression();
      break;
    case 2:                         // IRI_REF
    case 3:                         // PNAME_NS
    case 4:                         // PNAME_LN
      parse_FunctionCall();
      break;
    default:
      parse_BuiltInCall();
    }
    endNonterminal("Constraint");
  }

  private void parse_FunctionCall()
  {
    startNonterminal("FunctionCall");
    parse_IRIref();
    lookahead1W(5);                 // EPSILON | WS
    parse_ArgList();
    endNonterminal("FunctionCall");
  }

  private void parse_ArgList()
  {
    startNonterminal("ArgList");
    lookahead1(13);                 // NIL | '('
    switch (l1)
    {
    case 22:                        // NIL
      shift(22);                    // NIL
      break;
    default:
      shift(28);                    // '('
      lookahead1W(127);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      for (;;)
      {
        lookahead1W(35);            // WS | ')' | ','
        if (l1 != 32)               // ','
        {
          break;
        }
        shift(32);                  // ','
        lookahead1W(5);             // EPSILON | WS
        parse_Expression();
      }
      shift(29);                    // ')'
    }
    endNonterminal("ArgList");
  }

  private void parse_ExpressionList()
  {
    startNonterminal("ExpressionList");
    lookahead1(13);                 // NIL | '('
    switch (l1)
    {
    case 22:                        // NIL
      shift(22);                    // NIL
      break;
    default:
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      for (;;)
      {
        lookahead1W(35);            // WS | ')' | ','
        if (l1 != 32)               // ','
        {
          break;
        }
        shift(32);                  // ','
        lookahead1W(5);             // EPSILON | WS
        parse_Expression();
      }
      shift(29);                    // ')'
    }
    endNonterminal("ExpressionList");
  }

  private void parse_ConstructTemplate()
  {
    startNonterminal("ConstructTemplate");
    shift(157);                     // '{'
    lookahead1W(106);               // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | '[' | 'false' | 'true' | '}'
    if (l1 != 160)                  // '}'
    {
      parse_ConstructTriples();
    }
    lookahead1W(27);                // WS | '}'
    shift(160);                     // '}'
    endNonterminal("ConstructTemplate");
  }

  private void parse_ConstructTriples()
  {
    startNonterminal("ConstructTriples");
    parse_TriplesSameSubject();
    lookahead1W(40);                // WS | '.' | '}'
    if (l1 == 34)                   // '.'
    {
      shift(34);                    // '.'
      lookahead1W(106);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | '[' | 'false' | 'true' | '}'
      if (l1 != 160)                // '}'
      {
        parse_ConstructTriples();
      }
    }
    endNonterminal("ConstructTriples");
  }

  private void parse_TriplesSameSubject()
  {
    startNonterminal("TriplesSameSubject");
    lookahead1(103);                // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | ANON |
                                    // '(' | '[' | 'false' | 'true'
    switch (l1)
    {
    case 28:                        // '('
    case 144:                       // '['
      parse_TriplesNode();
      lookahead1W(5);               // EPSILON | WS
      parse_PropertyList();
      break;
    default:
      parse_VarOrTerm();
      lookahead1W(5);               // EPSILON | WS
      parse_PropertyListNotEmpty();
    }
    endNonterminal("TriplesSameSubject");
  }

  private void parse_PropertyListNotEmpty()
  {
    startNonterminal("PropertyListNotEmpty");
    lookahead1(66);                 // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | 'a'
    parse_Verb();
    lookahead1W(5);                 // EPSILON | WS
    parse_ObjectList();
    for (;;)
    {
      lookahead1W(92);              // WS | '.' | ';' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' |
                                    // ']' | '{' | '}'
      if (l1 != 36)                 // ';'
      {
        break;
      }
      shift(36);                    // ';'
      lookahead1W(98);              // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '.' | ';' | 'BIND' |
                                    // 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' | ']' | 'a' | '{' | '}'
      if (l1 == 2                   // IRI_REF
       || l1 == 3                   // PNAME_NS
       || l1 == 4                   // PNAME_LN
       || l1 == 6                   // VAR1
       || l1 == 7                   // VAR2
       || l1 == 148)                // 'a'
      {
        parse_Verb();
        lookahead1W(5);             // EPSILON | WS
        parse_ObjectList();
      }
    }
    endNonterminal("PropertyListNotEmpty");
  }

  private void parse_PropertyList()
  {
    startNonterminal("PropertyList");
    lookahead1W(87);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '.' | 'GRAPH' | 'a' | '}'
    if (l1 != 34                    // '.'
     && l1 != 80                    // 'GRAPH'
     && l1 != 160)                  // '}'
    {
      parse_PropertyListNotEmpty();
    }
    endNonterminal("PropertyList");
  }

  private void parse_ObjectList()
  {
    startNonterminal("ObjectList");
    parse_Object();
    for (;;)
    {
      lookahead1W(93);              // WS | ',' | '.' | ';' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' |
                                    // 'SERVICE' | ']' | '{' | '}'
      if (l1 != 32)                 // ','
      {
        break;
      }
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Object();
    }
    endNonterminal("ObjectList");
  }

  private void parse_Object()
  {
    startNonterminal("Object");
    parse_GraphNode();
    endNonterminal("Object");
  }

  private void parse_Verb()
  {
    startNonterminal("Verb");
    lookahead1(66);                 // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | 'a'
    switch (l1)
    {
    case 148:                       // 'a'
      shift(148);                   // 'a'
      break;
    default:
      parse_VarOrIRIref();
    }
    endNonterminal("Verb");
  }

  private void parse_TriplesSameSubjectPath()
  {
    startNonterminal("TriplesSameSubjectPath");
    lookahead1(103);                // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | ANON |
                                    // '(' | '[' | 'false' | 'true'
    switch (l1)
    {
    case 28:                        // '('
    case 144:                       // '['
      parse_TriplesNode();
      lookahead1W(5);               // EPSILON | WS
      parse_PropertyListPath();
      break;
    default:
      parse_VarOrTerm();
      lookahead1W(5);               // EPSILON | WS
      parse_PropertyListNotEmptyPath();
    }
    endNonterminal("TriplesSameSubjectPath");
  }

  private void parse_PropertyListNotEmptyPath()
  {
    startNonterminal("PropertyListNotEmptyPath");
    lookahead1(84);                 // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | '!' | '(' | '^' | 'a'
    switch (l1)
    {
    case 6:                         // VAR1
    case 7:                         // VAR2
      parse_VerbSimple();
      break;
    default:
      parse_VerbPath();
    }
    lookahead1W(5);                 // EPSILON | WS
    parse_ObjectList();
    for (;;)
    {
      lookahead1W(91);              // WS | '.' | ';' | 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' |
                                    // '{' | '}'
      if (l1 != 36)                 // ';'
      {
        break;
      }
      shift(36);                    // ';'
      lookahead1W(99);              // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '!' | '(' | '.' | ';' |
                                    // 'BIND' | 'FILTER' | 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' | '^' | 'a' |
                                    // '{' | '}'
      if (l1 == 2                   // IRI_REF
       || l1 == 3                   // PNAME_NS
       || l1 == 4                   // PNAME_LN
       || l1 == 6                   // VAR1
       || l1 == 7                   // VAR2
       || l1 == 25                  // '!'
       || l1 == 28                  // '('
       || l1 == 146                 // '^'
       || l1 == 148)                // 'a'
      {
        switch (l1)
        {
        case 6:                     // VAR1
        case 7:                     // VAR2
          parse_VerbSimple();
          break;
        default:
          parse_VerbPath();
        }
        lookahead1W(5);             // EPSILON | WS
        parse_ObjectList();
      }
    }
    endNonterminal("PropertyListNotEmptyPath");
  }

  private void parse_PropertyListPath()
  {
    startNonterminal("PropertyListPath");
    lookahead1W(97);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | WS | '.' | 'BIND' | 'FILTER' |
                                    // 'GRAPH' | 'MINUS' | 'OPTIONAL' | 'SERVICE' | 'a' | '{' | '}'
    if (l1 == 2                     // IRI_REF
     || l1 == 3                     // PNAME_NS
     || l1 == 4                     // PNAME_LN
     || l1 == 6                     // VAR1
     || l1 == 7                     // VAR2
     || l1 == 148)                  // 'a'
    {
      parse_PropertyListNotEmpty();
    }
    endNonterminal("PropertyListPath");
  }

  private void parse_VerbPath()
  {
    startNonterminal("VerbPath");
    parse_Path();
    endNonterminal("VerbPath");
  }

  private void parse_VerbSimple()
  {
    startNonterminal("VerbSimple");
    parse_Var();
    endNonterminal("VerbSimple");
  }

  private void parse_Path()
  {
    startNonterminal("Path");
    parse_PathAlternative();
    endNonterminal("Path");
  }

  private void parse_PathAlternative()
  {
    startNonterminal("PathAlternative");
    parse_PathSequence();
    for (;;)
    {
      lookahead1W(108);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | ')' | '[' | 'false' | 'true' | '|'
      if (l1 != 158)                // '|'
      {
        break;
      }
      shift(158);                   // '|'
      lookahead1W(5);               // EPSILON | WS
      parse_PathSequence();
    }
    endNonterminal("PathAlternative");
  }

  private void parse_PathSequence()
  {
    startNonterminal("PathSequence");
    parse_PathEltOrInverse();
    for (;;)
    {
      lookahead1W(110);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | ')' | '/' | '[' | 'false' | 'true' | '|'
      if (l1 != 35)                 // '/'
      {
        break;
      }
      shift(35);                    // '/'
      lookahead1W(5);               // EPSILON | WS
      parse_PathEltOrInverse();
    }
    endNonterminal("PathSequence");
  }

  private void parse_PathElt()
  {
    startNonterminal("PathElt");
    parse_PathPrimary();
    lookahead1W(112);               // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | ')' | '*' | '+' | '/' | '?' | '[' | 'false' | 'true' | '{' | '|'
    if (l1 == 30                    // '*'
     || l1 == 31                    // '+'
     || l1 == 42                    // '?'
     || l1 == 157)                  // '{'
    {
      parse_PathMod();
    }
    endNonterminal("PathElt");
  }

  private void parse_PathEltOrInverse()
  {
    startNonterminal("PathEltOrInverse");
    lookahead1(78);                 // IRI_REF | PNAME_NS | PNAME_LN | '!' | '(' | '^' | 'a'
    switch (l1)
    {
    case 146:                       // '^'
      shift(146);                   // '^'
      lookahead1W(5);               // EPSILON | WS
      parse_PathElt();
      break;
    default:
      parse_PathElt();
    }
    endNonterminal("PathEltOrInverse");
  }

  private void parse_PathMod()
  {
    startNonterminal("PathMod");
    switch (l1)
    {
    case 30:                        // '*'
      shift(30);                    // '*'
      break;
    case 42:                        // '?'
      shift(42);                    // '?'
      break;
    case 31:                        // '+'
      shift(31);                    // '+'
      break;
    default:
      shift(157);                   // '{'
      lookahead1W(32);              // INTEGER | WS | ','
      switch (l1)
      {
      case 9:                       // INTEGER
        parse_Integer();
        lookahead1W(39);            // WS | ',' | '}'
        switch (l1)
        {
        case 32:                    // ','
          shift(32);                // ','
          lookahead1W(33);          // INTEGER | WS | '}'
          switch (l1)
          {
          case 160:                 // '}'
            shift(160);             // '}'
            break;
          default:
            parse_Integer();
            lookahead1W(27);        // WS | '}'
            shift(160);             // '}'
          }
          break;
        default:
          shift(160);               // '}'
        }
        break;
      default:
        shift(32);                  // ','
        lookahead1W(11);            // INTEGER | WS
        parse_Integer();
        lookahead1W(27);            // WS | '}'
        shift(160);                 // '}'
      }
    }
    endNonterminal("PathMod");
  }

  private void parse_PathPrimary()
  {
    startNonterminal("PathPrimary");
    lookahead1(68);                 // IRI_REF | PNAME_NS | PNAME_LN | '!' | '(' | 'a'
    switch (l1)
    {
    case 148:                       // 'a'
      shift(148);                   // 'a'
      break;
    case 25:                        // '!'
      shift(25);                    // '!'
      lookahead1W(5);               // EPSILON | WS
      parse_PathNegatedPropertySet();
      break;
    case 28:                        // '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Path();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    default:
      parse_IRIref();
    }
    endNonterminal("PathPrimary");
  }

  private void parse_PathNegatedPropertySet()
  {
    startNonterminal("PathNegatedPropertySet");
    lookahead1(69);                 // IRI_REF | PNAME_NS | PNAME_LN | '(' | '^' | 'a'
    switch (l1)
    {
    case 28:                        // '('
      shift(28);                    // '('
      lookahead1W(76);              // IRI_REF | PNAME_NS | PNAME_LN | WS | ')' | '^' | 'a'
      if (l1 != 29)                 // ')'
      {
        parse_PathOneInPropertySet();
        for (;;)
        {
          lookahead1W(38);          // WS | ')' | '|'
          if (l1 != 158)            // '|'
          {
            break;
          }
          shift(158);               // '|'
          lookahead1W(5);           // EPSILON | WS
          parse_PathOneInPropertySet();
        }
      }
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    default:
      parse_PathOneInPropertySet();
    }
    endNonterminal("PathNegatedPropertySet");
  }

  private void parse_PathOneInPropertySet()
  {
    startNonterminal("PathOneInPropertySet");
    lookahead1(61);                 // IRI_REF | PNAME_NS | PNAME_LN | '^' | 'a'
    switch (l1)
    {
    case 148:                       // 'a'
      shift(148);                   // 'a'
      break;
    case 146:                       // '^'
      shift(146);                   // '^'
      lookahead1W(60);              // IRI_REF | PNAME_NS | PNAME_LN | WS | 'a'
      switch (l1)
      {
      case 148:                     // 'a'
        shift(148);                 // 'a'
        break;
      default:
        parse_IRIref();
      }
      break;
    default:
      parse_IRIref();
    }
    endNonterminal("PathOneInPropertySet");
  }

  private void parse_Integer()
  {
    startNonterminal("Integer");
    shift(9);                       // INTEGER
    endNonterminal("Integer");
  }

  private void parse_TriplesNode()
  {
    startNonterminal("TriplesNode");
    switch (l1)
    {
    case 28:                        // '('
      parse_Collection();
      break;
    default:
      parse_BlankNodePropertyList();
    }
    endNonterminal("TriplesNode");
  }

  private void parse_BlankNodePropertyList()
  {
    startNonterminal("BlankNodePropertyList");
    shift(144);                     // '['
    lookahead1W(5);                 // EPSILON | WS
    parse_PropertyListNotEmpty();
    lookahead1W(25);                // WS | ']'
    shift(145);                     // ']'
    endNonterminal("BlankNodePropertyList");
  }

  private void parse_Collection()
  {
    startNonterminal("Collection");
    shift(28);                      // '('
    lookahead1W(5);                 // EPSILON | WS
    for (;;)
    {
      lookahead1W(5);               // EPSILON | WS
      parse_GraphNode();
      lookahead1W(105);             // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | WS | ANON |
                                    // '(' | ')' | '[' | 'false' | 'true'
      if (l1 == 29)                 // ')'
      {
        break;
      }
    }
    shift(29);                      // ')'
    endNonterminal("Collection");
  }

  private void parse_GraphNode()
  {
    startNonterminal("GraphNode");
    lookahead1(103);                // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | INTEGER |
                                    // DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE |
                                    // INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 |
                                    // STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | NIL | ANON |
                                    // '(' | '[' | 'false' | 'true'
    switch (l1)
    {
    case 28:                        // '('
    case 144:                       // '['
      parse_TriplesNode();
      break;
    default:
      parse_VarOrTerm();
    }
    endNonterminal("GraphNode");
  }

  private void parse_VarOrTerm()
  {
    startNonterminal("VarOrTerm");
    switch (l1)
    {
    case 6:                         // VAR1
    case 7:                         // VAR2
      parse_Var();
      break;
    default:
      parse_GraphTerm();
    }
    endNonterminal("VarOrTerm");
  }

  private void parse_VarOrIRIref()
  {
    startNonterminal("VarOrIRIref");
    lookahead1(57);                 // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2
    switch (l1)
    {
    case 6:                         // VAR1
    case 7:                         // VAR2
      parse_Var();
      break;
    default:
      parse_IRIref();
    }
    endNonterminal("VarOrIRIref");
  }

  private void parse_Var()
  {
    startNonterminal("Var");
    lookahead1(10);                 // VAR1 | VAR2
    switch (l1)
    {
    case 6:                         // VAR1
      shift(6);                     // VAR1
      break;
    default:
      shift(7);                     // VAR2
    }
    endNonterminal("Var");
  }

  private void parse_GraphTerm()
  {
    startNonterminal("GraphTerm");
    switch (l1)
    {
    case 2:                         // IRI_REF
    case 3:                         // PNAME_NS
    case 4:                         // PNAME_LN
      parse_IRIref();
      break;
    case 18:                        // STRING_LITERAL1
    case 19:                        // STRING_LITERAL2
    case 20:                        // STRING_LITERAL_LONG1
    case 21:                        // STRING_LITERAL_LONG2
      parse_RDFLiteral();
      break;
    case 149:                       // 'false'
    case 156:                       // 'true'
      parse_BooleanLiteral();
      break;
    case 5:                         // BLANK_NODE_LABEL
    case 24:                        // ANON
      parse_BlankNode();
      break;
    case 22:                        // NIL
      shift(22);                    // NIL
      break;
    default:
      parse_NumericLiteral();
    }
    endNonterminal("GraphTerm");
  }

  private void parse_Expression()
  {
    startNonterminal("Expression");
    parse_ConditionalOrExpression();
    endNonterminal("Expression");
  }

  private void parse_ConditionalOrExpression()
  {
    startNonterminal("ConditionalOrExpression");
    parse_ConditionalAndExpression();
    for (;;)
    {
      lookahead1W(70);              // WS | ')' | ',' | ';' | 'AS' | '||'
      if (l1 != 159)                // '||'
      {
        break;
      }
      shift(159);                   // '||'
      lookahead1W(5);               // EPSILON | WS
      parse_ConditionalAndExpression();
    }
    endNonterminal("ConditionalOrExpression");
  }

  private void parse_ConditionalAndExpression()
  {
    startNonterminal("ConditionalAndExpression");
    parse_ValueLogical();
    for (;;)
    {
      lookahead1W(81);              // WS | '&&' | ')' | ',' | ';' | 'AS' | '||'
      if (l1 != 27)                 // '&&'
      {
        break;
      }
      shift(27);                    // '&&'
      lookahead1W(5);               // EPSILON | WS
      parse_ValueLogical();
    }
    endNonterminal("ConditionalAndExpression");
  }

  private void parse_ValueLogical()
  {
    startNonterminal("ValueLogical");
    parse_RelationalExpression();
    endNonterminal("ValueLogical");
  }

  private void parse_RelationalExpression()
  {
    startNonterminal("RelationalExpression");
    parse_NumericExpression();
    lookahead1W(95);                // WS | '!=' | '&&' | ')' | ',' | ';' | '<' | '<=' | '=' | '>' | '>=' | 'AS' |
                                    // 'IN' | 'NOT' | '||'
    if (l1 != 27                    // '&&'
     && l1 != 29                    // ')'
     && l1 != 32                    // ','
     && l1 != 36                    // ';'
     && l1 != 46                    // 'AS'
     && l1 != 159)                  // '||'
    {
      switch (l1)
      {
      case 39:                      // '='
        shift(39);                  // '='
        lookahead1W(5);             // EPSILON | WS
        parse_NumericExpression();
        break;
      case 26:                      // '!='
        shift(26);                  // '!='
        lookahead1W(5);             // EPSILON | WS
        parse_NumericExpression();
        break;
      case 37:                      // '<'
        shift(37);                  // '<'
        lookahead1W(5);             // EPSILON | WS
        parse_NumericExpression();
        break;
      case 40:                      // '>'
        shift(40);                  // '>'
        lookahead1W(5);             // EPSILON | WS
        parse_NumericExpression();
        break;
      case 38:                      // '<='
        shift(38);                  // '<='
        lookahead1W(5);             // EPSILON | WS
        parse_NumericExpression();
        break;
      case 41:                      // '>='
        shift(41);                  // '>='
        lookahead1W(5);             // EPSILON | WS
        parse_NumericExpression();
        break;
      case 86:                      // 'IN'
        shift(86);                  // 'IN'
        lookahead1W(5);             // EPSILON | WS
        parse_ExpressionList();
        break;
      default:
        shift(104);                 // 'NOT'
        lookahead1W(22);            // WS | 'IN'
        shift(86);                  // 'IN'
        lookahead1W(5);             // EPSILON | WS
        parse_ExpressionList();
      }
    }
    endNonterminal("RelationalExpression");
  }

  private void parse_NumericExpression()
  {
    startNonterminal("NumericExpression");
    parse_AdditiveExpression();
    endNonterminal("NumericExpression");
  }

  private void parse_AdditiveExpression()
  {
    startNonterminal("AdditiveExpression");
    parse_MultiplicativeExpression();
    for (;;)
    {
      lookahead1W(102);             // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | WS | '!=' | '&&' | ')' | '+' | ',' | '-' |
                                    // ';' | '<' | '<=' | '=' | '>' | '>=' | 'AS' | 'IN' | 'NOT' | '||'
      if (l1 != 12                  // INTEGER_POSITIVE
       && l1 != 13                  // DECIMAL_POSITIVE
       && l1 != 14                  // DOUBLE_POSITIVE
       && l1 != 15                  // INTEGER_NEGATIVE
       && l1 != 16                  // DECIMAL_NEGATIVE
       && l1 != 17                  // DOUBLE_NEGATIVE
       && l1 != 31                  // '+'
       && l1 != 33)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 31:                      // '+'
        shift(31);                  // '+'
        lookahead1W(5);             // EPSILON | WS
        parse_MultiplicativeExpression();
        break;
      case 33:                      // '-'
        shift(33);                  // '-'
        lookahead1W(5);             // EPSILON | WS
        parse_MultiplicativeExpression();
        break;
      default:
        switch (l1)
        {
        case 12:                    // INTEGER_POSITIVE
        case 13:                    // DECIMAL_POSITIVE
        case 14:                    // DOUBLE_POSITIVE
          parse_NumericLiteralPositive();
          break;
        default:
          parse_NumericLiteralNegative();
        }
        lookahead1W(104);           // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | WS | '!=' | '&&' | ')' | '*' | '+' | ',' |
                                    // '-' | '/' | ';' | '<' | '<=' | '=' | '>' | '>=' | 'AS' | 'IN' | 'NOT' | '||'
        if (l1 == 30                // '*'
         || l1 == 35)               // '/'
        {
          switch (l1)
          {
          case 30:                  // '*'
            shift(30);              // '*'
            lookahead1W(5);         // EPSILON | WS
            parse_UnaryExpression();
            break;
          default:
            shift(35);              // '/'
            lookahead1W(5);         // EPSILON | WS
            parse_UnaryExpression();
          }
        }
      }
    }
    endNonterminal("AdditiveExpression");
  }

  private void parse_MultiplicativeExpression()
  {
    startNonterminal("MultiplicativeExpression");
    parse_UnaryExpression();
    for (;;)
    {
      lookahead1W(104);             // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | WS | '!=' | '&&' | ')' | '*' | '+' | ',' |
                                    // '-' | '/' | ';' | '<' | '<=' | '=' | '>' | '>=' | 'AS' | 'IN' | 'NOT' | '||'
      if (l1 != 30                  // '*'
       && l1 != 35)                 // '/'
      {
        break;
      }
      switch (l1)
      {
      case 30:                      // '*'
        shift(30);                  // '*'
        lookahead1W(5);             // EPSILON | WS
        parse_UnaryExpression();
        break;
      default:
        shift(35);                  // '/'
        lookahead1W(5);             // EPSILON | WS
        parse_UnaryExpression();
      }
    }
    endNonterminal("MultiplicativeExpression");
  }

  private void parse_UnaryExpression()
  {
    startNonterminal("UnaryExpression");
    lookahead1(125);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | '!' | '(' | '+' | '-' | 'ABS' |
                                    // 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'ENCODE_FOR_URI' | 'EXISTS' | 'FLOOR' |
                                    // 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' | 'LCASE' |
                                    // 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' | 'REGEX' |
                                    // 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' |
                                    // 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' | 'STRSTARTS' |
                                    // 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' | 'false' |
                                    // 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' | 'sameTerm' | 'true'
    switch (l1)
    {
    case 25:                        // '!'
      shift(25);                    // '!'
      lookahead1W(5);               // EPSILON | WS
      parse_PrimaryExpression();
      break;
    case 31:                        // '+'
      shift(31);                    // '+'
      lookahead1W(5);               // EPSILON | WS
      parse_PrimaryExpression();
      break;
    case 33:                        // '-'
      shift(33);                    // '-'
      lookahead1W(5);               // EPSILON | WS
      parse_PrimaryExpression();
      break;
    default:
      parse_PrimaryExpression();
    }
    endNonterminal("UnaryExpression");
  }

  private void parse_PrimaryExpression()
  {
    startNonterminal("PrimaryExpression");
    lookahead1(124);                // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | '(' | 'ABS' | 'AVG' | 'BNODE' |
                                    // 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' | 'COUNT' | 'DATATYPE' |
                                    // 'DAY' | 'ENCODE_FOR_URI' | 'EXISTS' | 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' |
                                    // 'IRI' | 'LANG' | 'LANGMATCHES' | 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' |
                                    // 'MONTH' | 'NOT' | 'NOW' | 'RAND' | 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' |
                                    // 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' | 'SHA512' | 'STR' | 'STRDT' |
                                    // 'STRENDS' | 'STRLANG' | 'STRLEN' | 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' |
                                    // 'TZ' | 'UCASE' | 'URI' | 'YEAR' | 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' |
                                    // 'isNUMERIC' | 'isURI' | 'sameTerm' | 'true'
    switch (l1)
    {
    case 28:                        // '('
      parse_BrackettedExpression();
      break;
    case 2:                         // IRI_REF
    case 3:                         // PNAME_NS
    case 4:                         // PNAME_LN
      parse_IRIrefOrFunction();
      break;
    case 18:                        // STRING_LITERAL1
    case 19:                        // STRING_LITERAL2
    case 20:                        // STRING_LITERAL_LONG1
    case 21:                        // STRING_LITERAL_LONG2
      parse_RDFLiteral();
      break;
    case 9:                         // INTEGER
    case 10:                        // DECIMAL
    case 11:                        // DOUBLE
    case 12:                        // INTEGER_POSITIVE
    case 13:                        // DECIMAL_POSITIVE
    case 14:                        // DOUBLE_POSITIVE
    case 15:                        // INTEGER_NEGATIVE
    case 16:                        // DECIMAL_NEGATIVE
    case 17:                        // DOUBLE_NEGATIVE
      parse_NumericLiteral();
      break;
    case 149:                       // 'false'
    case 156:                       // 'true'
      parse_BooleanLiteral();
      break;
    case 6:                         // VAR1
    case 7:                         // VAR2
      parse_Var();
      break;
    case 49:                        // 'AVG'
    case 63:                        // 'COUNT'
    case 82:                        // 'GROUP_CONCAT'
    case 96:                        // 'MAX'
    case 98:                        // 'MIN'
    case 114:                       // 'SAMPLE'
    case 132:                       // 'SUM'
      parse_Aggregate();
      break;
    default:
      parse_BuiltInCall();
    }
    endNonterminal("PrimaryExpression");
  }

  private void parse_BrackettedExpression()
  {
    startNonterminal("BrackettedExpression");
    lookahead1(0);                  // '('
    shift(28);                      // '('
    lookahead1W(5);                 // EPSILON | WS
    parse_Expression();
    lookahead1W(15);                // WS | ')'
    shift(29);                      // ')'
    endNonterminal("BrackettedExpression");
  }

  private void parse_BuiltInCall()
  {
    startNonterminal("BuiltInCall");
    switch (l1)
    {
    case 125:                       // 'STR'
      shift(125);                   // 'STR'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 91:                        // 'LANG'
      shift(91);                    // 'LANG'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 92:                        // 'LANGMATCHES'
      shift(92);                    // 'LANGMATCHES'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 65:                        // 'DATATYPE'
      shift(65);                    // 'DATATYPE'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 54:                        // 'BOUND'
      shift(54);                    // 'BOUND'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(31);              // VAR1 | VAR2 | WS
      parse_Var();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 90:                        // 'IRI'
      shift(90);                    // 'IRI'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 139:                       // 'URI'
      shift(139);                   // 'URI'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 53:                        // 'BNODE'
      shift(53);                    // 'BNODE'
      lookahead1W(34);              // NIL | WS | '('
      switch (l1)
      {
      case 28:                      // '('
        shift(28);                  // '('
        lookahead1W(5);             // EPSILON | WS
        parse_Expression();
        lookahead1W(15);            // WS | ')'
        shift(29);                  // ')'
        break;
      default:
        shift(22);                  // NIL
      }
      break;
    case 110:                       // 'RAND'
      shift(110);                   // 'RAND'
      lookahead1W(12);              // NIL | WS
      shift(22);                    // NIL
      break;
    case 43:                        // 'ABS'
      shift(43);                    // 'ABS'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 56:                        // 'CEIL'
      shift(56);                    // 'CEIL'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 78:                        // 'FLOOR'
      shift(78);                    // 'FLOOR'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 113:                       // 'ROUND'
      shift(113);                   // 'ROUND'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 59:                        // 'CONCAT'
      shift(59);                    // 'CONCAT'
      lookahead1W(5);               // EPSILON | WS
      parse_ExpressionList();
      break;
    case 131:                       // 'SUBSTR'
      parse_SubstringExpression();
      break;
    case 129:                       // 'STRLEN'
      shift(129);                   // 'STRLEN'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 136:                       // 'UCASE'
      shift(136);                   // 'UCASE'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 93:                        // 'LCASE'
      shift(93);                    // 'LCASE'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 75:                        // 'ENCODE_FOR_URI'
      shift(75);                    // 'ENCODE_FOR_URI'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 61:                        // 'CONTAINS'
      shift(61);                    // 'CONTAINS'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 130:                       // 'STRSTARTS'
      shift(130);                   // 'STRSTARTS'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 127:                       // 'STRENDS'
      shift(127);                   // 'STRENDS'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 143:                       // 'YEAR'
      shift(143);                   // 'YEAR'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 101:                       // 'MONTH'
      shift(101);                   // 'MONTH'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 66:                        // 'DAY'
      shift(66);                    // 'DAY'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 84:                        // 'HOURS'
      shift(84);                    // 'HOURS'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 100:                       // 'MINUTES'
      shift(100);                   // 'MINUTES'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 115:                       // 'SECONDS'
      shift(115);                   // 'SECONDS'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 133:                       // 'TIMEZONE'
      shift(133);                   // 'TIMEZONE'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 135:                       // 'TZ'
      shift(135);                   // 'TZ'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 105:                       // 'NOW'
      shift(105);                   // 'NOW'
      lookahead1W(12);              // NIL | WS
      shift(22);                    // NIL
      break;
    case 97:                        // 'MD5'
      shift(97);                    // 'MD5'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 119:                       // 'SHA1'
      shift(119);                   // 'SHA1'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 120:                       // 'SHA224'
      shift(120);                   // 'SHA224'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 121:                       // 'SHA256'
      shift(121);                   // 'SHA256'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 122:                       // 'SHA384'
      shift(122);                   // 'SHA384'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 123:                       // 'SHA512'
      shift(123);                   // 'SHA512'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 58:                        // 'COALESCE'
      shift(58);                    // 'COALESCE'
      lookahead1W(5);               // EPSILON | WS
      parse_ExpressionList();
      break;
    case 85:                        // 'IF'
      shift(85);                    // 'IF'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 128:                       // 'STRLANG'
      shift(128);                   // 'STRLANG'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 126:                       // 'STRDT'
      shift(126);                   // 'STRDT'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 155:                       // 'sameTerm'
      shift(155);                   // 'sameTerm'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(16);              // WS | ','
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 151:                       // 'isIRI'
      shift(151);                   // 'isIRI'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 154:                       // 'isURI'
      shift(154);                   // 'isURI'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 150:                       // 'isBLANK'
      shift(150);                   // 'isBLANK'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 152:                       // 'isLITERAL'
      shift(152);                   // 'isLITERAL'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 153:                       // 'isNUMERIC'
      shift(153);                   // 'isNUMERIC'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 112:                       // 'REGEX'
      parse_RegexExpression();
      break;
    case 76:                        // 'EXISTS'
      parse_ExistsFunc();
      break;
    default:
      parse_NotExistsFunc();
    }
    endNonterminal("BuiltInCall");
  }

  private void parse_RegexExpression()
  {
    startNonterminal("RegexExpression");
    shift(112);                     // 'REGEX'
    lookahead1W(14);                // WS | '('
    shift(28);                      // '('
    lookahead1W(5);                 // EPSILON | WS
    parse_Expression();
    lookahead1W(16);                // WS | ','
    shift(32);                      // ','
    lookahead1W(5);                 // EPSILON | WS
    parse_Expression();
    lookahead1W(35);                // WS | ')' | ','
    if (l1 == 32)                   // ','
    {
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
    }
    lookahead1W(15);                // WS | ')'
    shift(29);                      // ')'
    endNonterminal("RegexExpression");
  }

  private void parse_SubstringExpression()
  {
    startNonterminal("SubstringExpression");
    shift(131);                     // 'SUBSTR'
    lookahead1W(14);                // WS | '('
    shift(28);                      // '('
    lookahead1W(5);                 // EPSILON | WS
    parse_Expression();
    lookahead1W(16);                // WS | ','
    shift(32);                      // ','
    lookahead1W(5);                 // EPSILON | WS
    parse_Expression();
    lookahead1W(35);                // WS | ')' | ','
    if (l1 == 32)                   // ','
    {
      shift(32);                    // ','
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
    }
    lookahead1W(15);                // WS | ')'
    shift(29);                      // ')'
    endNonterminal("SubstringExpression");
  }

  private void parse_ExistsFunc()
  {
    startNonterminal("ExistsFunc");
    shift(76);                      // 'EXISTS'
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("ExistsFunc");
  }

  private void parse_NotExistsFunc()
  {
    startNonterminal("NotExistsFunc");
    shift(104);                     // 'NOT'
    lookahead1W(20);                // WS | 'EXISTS'
    shift(76);                      // 'EXISTS'
    lookahead1W(5);                 // EPSILON | WS
    parse_GroupGraphPattern();
    endNonterminal("NotExistsFunc");
  }

  private void parse_Aggregate()
  {
    startNonterminal("Aggregate");
    switch (l1)
    {
    case 63:                        // 'COUNT'
      shift(63);                    // 'COUNT'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(128);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '*' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(126);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '*' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'ENCODE_FOR_URI' | 'EXISTS' | 'FLOOR' |
                                    // 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' | 'LCASE' |
                                    // 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' | 'REGEX' |
                                    // 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' | 'SHA384' |
                                    // 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' | 'STRSTARTS' |
                                    // 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' | 'false' |
                                    // 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' | 'sameTerm' | 'true'
      switch (l1)
      {
      case 30:                      // '*'
        shift(30);                  // '*'
        break;
      default:
        parse_Expression();
      }
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 132:                       // 'SUM'
      shift(132);                   // 'SUM'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(127);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 98:                        // 'MIN'
      shift(98);                    // 'MIN'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(127);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 96:                        // 'MAX'
      shift(96);                    // 'MAX'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(127);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 49:                        // 'AVG'
      shift(49);                    // 'AVG'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(127);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    case 114:                       // 'SAMPLE'
      shift(114);                   // 'SAMPLE'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(127);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
      break;
    default:
      shift(82);                    // 'GROUP_CONCAT'
      lookahead1W(14);              // WS | '('
      shift(28);                    // '('
      lookahead1W(127);             // IRI_REF | PNAME_NS | PNAME_LN | VAR1 | VAR2 | INTEGER | DECIMAL | DOUBLE |
                                    // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | STRING_LITERAL1 | STRING_LITERAL2 |
                                    // STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 | WS | '!' | '(' | '+' | '-' |
                                    // 'ABS' | 'AVG' | 'BNODE' | 'BOUND' | 'CEIL' | 'COALESCE' | 'CONCAT' | 'CONTAINS' |
                                    // 'COUNT' | 'DATATYPE' | 'DAY' | 'DISTINCT' | 'ENCODE_FOR_URI' | 'EXISTS' |
                                    // 'FLOOR' | 'GROUP_CONCAT' | 'HOURS' | 'IF' | 'IRI' | 'LANG' | 'LANGMATCHES' |
                                    // 'LCASE' | 'MAX' | 'MD5' | 'MIN' | 'MINUTES' | 'MONTH' | 'NOT' | 'NOW' | 'RAND' |
                                    // 'REGEX' | 'ROUND' | 'SAMPLE' | 'SECONDS' | 'SHA1' | 'SHA224' | 'SHA256' |
                                    // 'SHA384' | 'SHA512' | 'STR' | 'STRDT' | 'STRENDS' | 'STRLANG' | 'STRLEN' |
                                    // 'STRSTARTS' | 'SUBSTR' | 'SUM' | 'TIMEZONE' | 'TZ' | 'UCASE' | 'URI' | 'YEAR' |
                                    // 'false' | 'isBLANK' | 'isIRI' | 'isLITERAL' | 'isNUMERIC' | 'isURI' |
                                    // 'sameTerm' | 'true'
      if (l1 == 73)                 // 'DISTINCT'
      {
        shift(73);                  // 'DISTINCT'
      }
      lookahead1W(5);               // EPSILON | WS
      parse_Expression();
      lookahead1W(36);              // WS | ')' | ';'
      if (l1 == 36)                 // ';'
      {
        shift(36);                  // ';'
        lookahead1W(23);            // WS | 'SEPARATOR'
        shift(117);                 // 'SEPARATOR'
        lookahead1W(17);            // WS | '='
        shift(39);                  // '='
        lookahead1W(63);            // STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 |
                                    // WS
        parse_String();
      }
      lookahead1W(15);              // WS | ')'
      shift(29);                    // ')'
    }
    endNonterminal("Aggregate");
  }

  private void parse_IRIrefOrFunction()
  {
    startNonterminal("IRIrefOrFunction");
    parse_IRIref();
    lookahead1W(107);               // INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE | INTEGER_NEGATIVE |
                                    // DECIMAL_NEGATIVE | DOUBLE_NEGATIVE | NIL | WS | '!=' | '&&' | '(' | ')' | '*' |
                                    // '+' | ',' | '-' | '/' | ';' | '<' | '<=' | '=' | '>' | '>=' | 'AS' | 'IN' |
                                    // 'NOT' | '||'
    if (l1 == 22                    // NIL
     || l1 == 28)                   // '('
    {
      parse_ArgList();
    }
    endNonterminal("IRIrefOrFunction");
  }

  private void parse_RDFLiteral()
  {
    startNonterminal("RDFLiteral");
    parse_String();
    lookahead1W(120);               // IRI_REF | PNAME_NS | PNAME_LN | BLANK_NODE_LABEL | VAR1 | VAR2 | LANGTAG |
                                    // INTEGER | DECIMAL | DOUBLE | INTEGER_POSITIVE | DECIMAL_POSITIVE |
                                    // DOUBLE_POSITIVE | INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE |
                                    // STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2 |
                                    // NIL | WS | ANON | '!' | '!=' | '&&' | '(' | ')' | '*' | '+' | ',' | '-' | '.' |
                                    // '/' | ';' | '<' | '<=' | '=' | '>' | '>=' | 'AS' | 'BIND' | 'FILTER' | 'GRAPH' |
                                    // 'IN' | 'MINUS' | 'NOT' | 'OPTIONAL' | 'SERVICE' | 'UNDEF' | '[' | ']' | '^' |
                                    // '^^' | 'a' | 'false' | 'true' | '{' | '||' | '}'
    if (l1 == 8                     // LANGTAG
     || l1 == 147)                  // '^^'
    {
      switch (l1)
      {
      case 8:                       // LANGTAG
        shift(8);                   // LANGTAG
        break;
      default:
        shift(147);                 // '^^'
        lookahead1W(49);            // IRI_REF | PNAME_NS | PNAME_LN | WS
        parse_IRIref();
      }
    }
    endNonterminal("RDFLiteral");
  }

  private void parse_NumericLiteral()
  {
    startNonterminal("NumericLiteral");
    switch (l1)
    {
    case 9:                         // INTEGER
    case 10:                        // DECIMAL
    case 11:                        // DOUBLE
      parse_NumericLiteralUnsigned();
      break;
    case 12:                        // INTEGER_POSITIVE
    case 13:                        // DECIMAL_POSITIVE
    case 14:                        // DOUBLE_POSITIVE
      parse_NumericLiteralPositive();
      break;
    default:
      parse_NumericLiteralNegative();
    }
    endNonterminal("NumericLiteral");
  }

  private void parse_NumericLiteralUnsigned()
  {
    startNonterminal("NumericLiteralUnsigned");
    switch (l1)
    {
    case 9:                         // INTEGER
      shift(9);                     // INTEGER
      break;
    case 10:                        // DECIMAL
      shift(10);                    // DECIMAL
      break;
    default:
      shift(11);                    // DOUBLE
    }
    endNonterminal("NumericLiteralUnsigned");
  }

  private void parse_NumericLiteralPositive()
  {
    startNonterminal("NumericLiteralPositive");
    switch (l1)
    {
    case 12:                        // INTEGER_POSITIVE
      shift(12);                    // INTEGER_POSITIVE
      break;
    case 13:                        // DECIMAL_POSITIVE
      shift(13);                    // DECIMAL_POSITIVE
      break;
    default:
      shift(14);                    // DOUBLE_POSITIVE
    }
    endNonterminal("NumericLiteralPositive");
  }

  private void parse_NumericLiteralNegative()
  {
    startNonterminal("NumericLiteralNegative");
    switch (l1)
    {
    case 15:                        // INTEGER_NEGATIVE
      shift(15);                    // INTEGER_NEGATIVE
      break;
    case 16:                        // DECIMAL_NEGATIVE
      shift(16);                    // DECIMAL_NEGATIVE
      break;
    default:
      shift(17);                    // DOUBLE_NEGATIVE
    }
    endNonterminal("NumericLiteralNegative");
  }

  private void parse_BooleanLiteral()
  {
    startNonterminal("BooleanLiteral");
    switch (l1)
    {
    case 156:                       // 'true'
      shift(156);                   // 'true'
      break;
    default:
      shift(149);                   // 'false'
    }
    endNonterminal("BooleanLiteral");
  }

  private void parse_String()
  {
    startNonterminal("String");
    lookahead1(51);                 // STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
    switch (l1)
    {
    case 18:                        // STRING_LITERAL1
      shift(18);                    // STRING_LITERAL1
      break;
    case 19:                        // STRING_LITERAL2
      shift(19);                    // STRING_LITERAL2
      break;
    case 20:                        // STRING_LITERAL_LONG1
      shift(20);                    // STRING_LITERAL_LONG1
      break;
    default:
      shift(21);                    // STRING_LITERAL_LONG2
    }
    endNonterminal("String");
  }

  private void parse_IRIref()
  {
    startNonterminal("IRIref");
    lookahead1(30);                 // IRI_REF | PNAME_NS | PNAME_LN
    switch (l1)
    {
    case 2:                         // IRI_REF
      shift(2);                     // IRI_REF
      break;
    default:
      parse_PrefixedName();
    }
    endNonterminal("IRIref");
  }

  private void parse_PrefixedName()
  {
    startNonterminal("PrefixedName");
    switch (l1)
    {
    case 4:                         // PNAME_LN
      shift(4);                     // PNAME_LN
      break;
    default:
      shift(3);                     // PNAME_NS
    }
    endNonterminal("PrefixedName");
  }

  private void parse_BlankNode()
  {
    startNonterminal("BlankNode");
    switch (l1)
    {
    case 5:                         // BLANK_NODE_LABEL
      shift(5);                     // BLANK_NODE_LABEL
      break;
    default:
      shift(24);                    // ANON
    }
    endNonterminal("BlankNode");
  }

  private int lk, b0, e0;
  private int l1, b1, e1;
  
  /** The delayed tag. */
  protected String delayedTag;

  /**
   * Start nonterminal.
   *
   * @param tag the tag
   */
  protected void startNonterminal(String tag)
  {
    if (delayedTag != null) writeOutput("<" + delayedTag + ">");
    delayedTag = tag;
  }

  /**
   * End nonterminal.
   *
   * @param tag the tag
   */
  protected void endNonterminal(String tag)
  {
    if (delayedTag != null)
      writeOutput("<" + tag + "/>");
    else
      writeOutput("</" + tag + ">");
    delayedTag = null;
  }

  /**
   * Characters.
   *
   * @param begin the begin
   * @param end the end
   */
  protected void characters(int begin, int end)
  {
    if (end <= size)
    {
      if (delayedTag != null) writeOutput("<" + delayedTag + ">");
      writeOutput(input.substring(begin, end)
          .replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;"));
      delayedTag = null;
    }
  }

  /**
   * Terminal.
   *
   * @param tag the tag
   * @param begin the begin
   * @param end the end
   */
  protected void terminal(String tag, int begin, int end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    startNonterminal(tag);
    characters(begin, end);
    endNonterminal(tag);
  }

  private void error(int b, int e, int s, int l, int t)
  {
    flushOutput();
    flushTrace();
    throw new ParseException(b, e, s, l, t);
  }

  private void shift(int t)
  {
    if (l1 == t)
    {
      if (e0 != b1)
      {
        characters(e0, b1);
      }
      terminal(TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = 0;
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  private int matchW(int set)
  {
    for (;;)
    {
      int code = match(set);
      if (code != 23)               // WS
      {
        return code;
      }
    }
  }

  private void lookahead1W(int set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  private void lookahead1(int set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  /** The input. */
  protected String input = null;
  
  /** The size. */
  protected int size = 0;
  private int begin = 0;
  private int end = 0;
  private int state = 0;
  private java.io.Writer out;
  {
    try
    {
      out = new java.io.OutputStreamWriter(System.out, "UTF-8");
    }
    catch (java.io.UnsupportedEncodingException uee)
    {}
  }
  private java.io.Writer err;
  {
    try
    {
      err = new java.io.OutputStreamWriter(System.err, "UTF-8");
    }
    catch (java.io.UnsupportedEncodingException uee)
    {}
  }

  private int match(int tokenset)
  {
    writeTrace("  <match tokenset=\"" + tokenset + "\">\n");

    begin = end;
    int current = end;
    int result = INITIAL[tokenset];

    writeTrace("    <next state=\"" + (result & 1023) + "\"");
    for (int code = result & 1023; code != 0; )
    {
      int charclass;
      int c0 = current < size ? input.charAt(current) : 0;
      writeTrace(" offset=\"" + current + "\" char=\"" + c0 + "\"");
      ++current;
      if (c0 < 0x80)
      {
        charclass = MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        int c1 = c0 >> 4;
        charclass = MAP1[(c0 & 15) + MAP1[(c1 & 31) + MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          int c1 = current < size ? input.charAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            writeTrace(" char2=\"" + c1 + "\" codepoint=\"" + c0 + "\"");
          }
          else
          {
            c0 = -1;
          }
        }

        int lo = 0, hi = 5;
        for (int m = 3; ; m = (hi + lo) >> 1)
        {
          if (MAP2[m] > c0) {hi = m - 1;}
          else if (MAP2[6 + m] < c0) {lo = m + 1;}
          else {charclass = MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }
      writeTrace(" class=\"" + charclass + "\"");

      state = code;
      int i0 = (charclass << 10) + code - 1;
      code = TRANSITION[(i0 & 15) + TRANSITION[i0 >> 4]];

      if (code > 1023)
      {
        result = code;
        writeTrace(" result=\"" + TOKEN[((result >> 10) & 255) - 1] + "\"");
        code &= 1023;
        end = current;
      }
      writeTrace("/>\n");
      if (code != 0)
      {
        writeTrace("    <next state=\"" + code + "\"");
      }
    }

    result >>= 10;
    if (result == 0)
    {
      end = current - 1;
      int c1 = end < size ? input.charAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000)
      {
        --end;
      }
      writeTrace("    <fail begin=\"" + begin + "\" end=\"" + end + "\" state=\"" + state + "\"/>\n");
      writeTrace("  </match>\n");
      error(begin, end, state, -1, -1);
    }

    writeTrace("    <done result=\"" + TOKEN[(result & 255) - 1] + "\" begin=\"" + begin + "\" end=\"" + end + "\"/>\n");
    writeTrace("  </match>\n");
    return (result & 255) - 1;
  }

  /**
   * Sets the output writer.
   *
   * @param w the new output writer
   */
  public void setOutputWriter(java.io.Writer w)
  {
    out = w;
  }

  private void writeOutput(String content)
  {
    try
    {
      out.write(content);
    }
    catch (java.io.IOException e)
    {
      throw new RuntimeException(e);
    }
  }

  private void flushOutput()
  {
    try
    {
      out.flush();
    }
    catch (java.io.IOException e)
    {
      throw new RuntimeException(e);
    }
  }

  /**
   * Sets the trace writer.
   *
   * @param w the new trace writer
   */
  public void setTraceWriter(java.io.Writer w)
  {
    err = w;
  }

  /**
   * Write trace.
   *
   * @param content the content
   */
  protected void writeTrace(String content)
  {
    try
    {
      err.write(content);
    }
    catch (java.io.IOException e)
    {
      throw new RuntimeException(e);
    }
  }

  /**
   * Flush trace.
   */
  protected void flushTrace()
  {
    try
    {
      err.flush();
    }
    catch (java.io.IOException e)
    {
      throw new RuntimeException(e);
    }
  }

  private static String[] getExpectedTokenSet(int s)
  {
    java.util.ArrayList<String> expected = new java.util.ArrayList<String>();
    if (s > 0)
    {
      for (int i = 0; i < 161; i += 32)
      {
        int j = i;
        int i0 = (i >> 5) * 725 + s - 1;
        int i1 = i0 >> 2;
        int i2 = i1 >> 2;
        int f = EXPECTED[(i0 & 3) + EXPECTED[(i1 & 3) + EXPECTED[(i2 & 127) + EXPECTED[i2 >> 7]]]];
        for ( ; f != 0; f >>>= 1, ++j)
        {
          if ((f & 1) != 0)
          {
            expected.add(TOKEN[j]);
          }
        }
      }
    }
    return expected.toArray(new String[]{});
  }

  private static final int MAP0[] = new int[128];
  static
  {
    final String s1[] =
    {
      /*   0 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3",
      /*  34 */ "4, 5, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 17, 24, 17, 25, 26, 27",
      /*  61 */ "28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 41, 48, 49, 50, 51",
      /*  86 */ "52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 41, 41, 65, 66, 41, 41, 67, 41, 41, 68, 69, 64",
      /* 111 */ "41, 41, 41, 70, 71, 72, 73, 41, 41, 41, 41, 41, 74, 75, 76, 5, 5"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 128; ++i) {MAP0[i] = Integer.parseInt(s2[i]);}
  }

  private static final int MAP1[] = new int[449];
  static
  {
    final String s1[] =
    {
      /*   0 */ "108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181",
      /*  20 */ "181, 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  40 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  60 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /*  80 */ "214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214",
      /* 100 */ "214, 214, 214, 214, 214, 214, 214, 214, 254, 247, 270, 286, 302, 318, 334, 349, 385, 385, 385, 377",
      /* 120 */ "433, 425, 433, 425, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433",
      /* 140 */ "402, 402, 402, 402, 402, 402, 402, 418, 433, 433, 433, 433, 433, 433, 433, 433, 363, 385, 385, 386",
      /* 160 */ "384, 385, 385, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433",
      /* 180 */ "433, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385",
      /* 200 */ "385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 432, 433, 433, 433, 433, 433, 433",
      /* 220 */ "433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433, 433",
      /* 240 */ "433, 433, 433, 433, 433, 433, 385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 1, 0, 0, 1, 0",
      /* 269 */ "0, 2, 3, 4, 5, 6, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 17, 24, 17, 25",
      /* 297 */ "26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 41, 48, 49",
      /* 322 */ "50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 41, 41, 65, 66, 41, 41, 67, 41, 41, 68",
      /* 347 */ "69, 64, 41, 41, 70, 71, 72, 73, 41, 41, 41, 41, 41, 74, 75, 76, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5",
      /* 375 */ "78, 78, 5, 5, 5, 5, 5, 5, 5, 77, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 77, 77, 77, 77, 77",
      /* 406 */ "77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78",
      /* 431 */ "78, 5, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 449; ++i) {MAP1[i] = Integer.parseInt(s2[i]);}
  }

  private static final int MAP2[] = new int[18];
  static
  {
    final String s1[] =
    {
      /*  0 */ "57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 5, 78, 5, 78",
      /* 16 */ "78, 5"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 18; ++i) {MAP2[i] = Integer.parseInt(s2[i]);}
  }

  private static final int INITIAL[] = new int[129];
  static
  {
    final String s1[] =
    {
      /*   0 */ "1, 2, 3, 4, 5, 1030, 2054, 2055, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25",
      /*  26 */ "26, 27, 2076, 2077, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 2096, 49",
      /*  50 */ "50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 2120, 2121",
      /*  74 */ "74, 75, 76, 77, 78, 79, 80, 81, 2130, 2131, 84, 85, 2134, 87, 88, 2137, 2138, 91, 92, 93, 2142, 95",
      /*  96 */ "2144, 97, 98, 99, 2148, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115",
      /* 116 */ "116, 117, 118, 119, 120, 2169, 2170, 2171, 124, 125, 126, 127, 128"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 129; ++i) {INITIAL[i] = Integer.parseInt(s2[i]);}
  }

  private static final int TRANSITION[] = new int[14241];
  static
  {
    final String s1[] =
    {
      /*     0 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*    16 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*    32 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*    48 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*    64 */ "10334, 5162, 5159, 10344, 5120, 5130, 5127, 5146, 9272, 8698, 8698, 8698, 8698, 12122, 8698, 8698",
      /*    80 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*    96 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   112 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   128 */ "10334, 5162, 5159, 10344, 5120, 5130, 5127, 5146, 9272, 12129, 8698, 8698, 8698, 12122, 8698, 8698",
      /*   144 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   160 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 9210, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   176 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   192 */ "8698, 8698, 8698, 8698, 5178, 5188, 5204, 8196, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   208 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   224 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   240 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   256 */ "8698, 8698, 8698, 5240, 8698, 8698, 5250, 5266, 8698, 7461, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   272 */ "8698, 5282, 8698, 8698, 8698, 8698, 8698, 8698, 5427, 8697, 8698, 8698, 8698, 8698, 8698, 5292",
      /*   288 */ "8698, 8698, 8698, 8698, 8698, 5308, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   304 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   320 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   336 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   352 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   368 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   384 */ "6664, 9534, 8698, 6672, 5342, 5327, 5356, 5368, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   400 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   416 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   432 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   448 */ "8698, 8698, 8698, 8698, 8698, 5551, 5541, 5558, 12750, 12129, 9675, 8698, 8698, 8698, 5465, 8698",
      /*   464 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   480 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   496 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   512 */ "8698, 8698, 8698, 5384, 8698, 8698, 5394, 5410, 12750, 6112, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   528 */ "8698, 8186, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 5426, 8698, 8698, 8698, 8698, 8698, 12202",
      /*   544 */ "8698, 8698, 8698, 8698, 8698, 5443, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   560 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   576 */ "5527, 8698, 5463, 5482, 5512, 5492, 5574, 5586, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   592 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   608 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   624 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   640 */ "7205, 8698, 5602, 8698, 10389, 5607, 5623, 9667, 9657, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   656 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   672 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   688 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   704 */ "8698, 8698, 8698, 12173, 12177, 8698, 8837, 8514, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   720 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   736 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   752 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   768 */ "8698, 8698, 8698, 8698, 8698, 8698, 5639, 5655, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   784 */ "8698, 10401, 8698, 8698, 8698, 5671, 8698, 8698, 8699, 8697, 8698, 9092, 8698, 8698, 8698, 7053",
      /*   800 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   816 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   832 */ "6600, 6600, 5688, 8698, 10464, 5694, 13474, 10462, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*   848 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*   864 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   880 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   896 */ "8698, 8698, 8698, 8698, 8698, 8698, 5710, 5722, 9761, 8476, 12579, 13424, 6361, 7347, 7797, 5739",
      /*   912 */ "8868, 5942, 12581, 9973, 6364, 5738, 7411, 10238, 12583, 5755, 13425, 6470, 9066, 7411, 8323, 12548",
      /*   928 */ "12582, 7354, 7411, 7411, 5776, 5798, 11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698",
      /*   944 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*   960 */ "8698, 8698, 12092, 12095, 8698, 7826, 5820, 5833, 5849, 6173, 5871, 13443, 5891, 5907, 6071, 6221",
      /*   976 */ "5930, 8624, 5873, 8446, 5970, 6220, 6069, 6016, 5875, 6040, 13444, 6136, 6064, 6069, 6087, 11629",
      /*   992 */ "5874, 5914, 6069, 6069, 6089, 6105, 6128, 6069, 6159, 6069, 6143, 6024, 6208, 6187, 8698, 8698",
      /*  1008 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1024 */ "8698, 8698, 8698, 8698, 8698, 8698, 7394, 12399, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*  1040 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*  1056 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1072 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1088 */ "11589, 6274, 6273, 8698, 8698, 8698, 6237, 6249, 6265, 8878, 12579, 13424, 6428, 6290, 7797, 5739",
      /*  1104 */ "8966, 5942, 12581, 9973, 10965, 6313, 7411, 11078, 12583, 5755, 13425, 11723, 6313, 7411, 13366",
      /*  1119 */ "12548, 12582, 8048, 7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093",
      /*  1134 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1150 */ "8698, 8698, 11589, 6274, 6273, 8698, 8698, 8698, 6237, 6249, 6265, 8878, 12579, 13424, 6428, 6290",
      /*  1166 */ "7797, 5739, 8966, 5942, 12581, 9973, 10965, 6313, 7411, 11078, 12583, 5755, 13425, 11723, 6313",
      /*  1181 */ "10721, 13366, 12548, 12582, 8048, 7411, 13112, 13368, 5798, 11896, 7411, 13034, 7411, 5782, 13119",
      /*  1196 */ "11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1212 */ "8698, 8698, 8698, 8698, 11589, 6274, 6273, 8698, 8698, 8698, 6237, 6249, 6265, 8878, 12579, 13424",
      /*  1228 */ "6428, 6290, 7797, 5739, 8966, 5942, 12581, 9973, 10965, 6313, 7411, 11078, 12583, 5755, 13425",
      /*  1243 */ "11723, 6313, 7706, 13366, 12548, 12582, 8048, 7411, 6334, 13368, 5798, 11896, 6355, 13034, 7411",
      /*  1258 */ "5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1274 */ "8698, 8698, 8698, 8698, 8698, 8698, 11589, 6274, 6273, 8698, 8698, 8698, 6237, 6249, 6265, 8878",
      /*  1290 */ "12579, 13424, 6428, 6290, 7797, 5739, 8966, 5942, 12581, 9973, 10965, 6313, 7411, 11078, 12583",
      /*  1305 */ "5755, 13425, 11723, 6313, 13940, 13366, 12548, 12582, 8048, 7411, 7411, 13368, 5798, 11896, 7411",
      /*  1320 */ "13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1336 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 11589, 6274, 6273, 8698, 8698, 8698, 6237, 6249",
      /*  1352 */ "6265, 8878, 12579, 13424, 6428, 6290, 7797, 5739, 8966, 5942, 12581, 9973, 10965, 6313, 7411, 11078",
      /*  1368 */ "12583, 5755, 13425, 11723, 6313, 7411, 13366, 12548, 12582, 8048, 7411, 7411, 13368, 5798, 11896",
      /*  1383 */ "6380, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1399 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 11589, 6274, 6273, 8698, 8698, 8698, 6237",
      /*  1415 */ "6249, 6265, 8878, 12579, 13424, 6428, 6290, 7797, 5739, 8966, 5942, 12581, 9973, 10965, 6313, 6401",
      /*  1431 */ "11078, 12583, 5755, 13425, 11723, 6313, 8243, 13366, 12548, 12582, 8048, 7411, 6422, 13368, 5798",
      /*  1446 */ "11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1462 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 11589, 6274, 6273, 8698, 8698, 8698",
      /*  1478 */ "6237, 6249, 6265, 8878, 12579, 13424, 6428, 6290, 7797, 5739, 8966, 5942, 12581, 9973, 10965, 6313",
      /*  1494 */ "7411, 11078, 12583, 5755, 13425, 11723, 6313, 7411, 13366, 12548, 12582, 8048, 7411, 7411, 13368",
      /*  1509 */ "5798, 11896, 6444, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1525 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 11589, 6274, 6273, 8698, 8698",
      /*  1541 */ "8698, 6237, 6249, 6265, 8878, 12579, 13424, 6428, 6290, 7797, 5739, 8966, 5942, 12581, 9973, 10965",
      /*  1557 */ "6313, 7411, 11078, 12583, 5755, 13425, 11723, 6313, 7411, 13366, 12548, 12582, 8048, 7411, 6464",
      /*  1572 */ "13368, 5798, 11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1588 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12848, 10186, 8698, 6486",
      /*  1604 */ "6494, 6737, 6510, 6547, 6565, 6725, 6595, 5446, 6528, 6792, 6549, 6617, 6599, 9173, 6597, 10565",
      /*  1620 */ "6531, 6616, 6547, 6633, 6820, 6656, 5447, 6528, 6616, 6547, 6764, 12373, 6598, 6640, 6547, 6547",
      /*  1636 */ "6766, 6688, 6520, 6547, 6711, 6547, 6753, 6800, 6782, 6816, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1652 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 6571, 6579, 8698",
      /*  1668 */ "6577, 6846, 6836, 6575, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698, 8698, 10401, 8698, 8698",
      /*  1684 */ "8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698",
      /*  1700 */ "8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1716 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12747, 5466, 8698, 6877",
      /*  1732 */ "6885, 6862, 6901, 6912, 8698, 12129, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 10401, 8698, 8698",
      /*  1748 */ "8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698",
      /*  1764 */ "8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1780 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 5222, 8698, 8698",
      /*  1796 */ "8698, 10654, 13665, 5215, 12750, 12129, 8698, 7846, 8698, 8698, 5496, 8698, 8698, 10401, 8698, 8698",
      /*  1812 */ "8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698",
      /*  1828 */ "8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1844 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1860 */ "8698, 13538, 5985, 13485, 6928, 12129, 8698, 8698, 8698, 8698, 5311, 8698, 8698, 10401, 8698, 8698",
      /*  1876 */ "8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698",
      /*  1892 */ "8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1908 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 13493, 13257, 8698, 13501",
      /*  1924 */ "6964, 6949, 6991, 6978, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698, 8698, 10401, 8698, 8698",
      /*  1940 */ "8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698",
      /*  1956 */ "8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1972 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  1988 */ "8698, 8698, 8698, 9264, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698, 8698, 10401, 8698, 8698",
      /*  2004 */ "8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698",
      /*  2020 */ "8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2036 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 7014, 7007, 12432",
      /*  2052 */ "8270, 7030, 7069, 7096, 10029, 8976, 12579, 7112, 7132, 10591, 7160, 11418, 7176, 5942, 7202, 11887",
      /*  2068 */ "6364, 10067, 7221, 7275, 7045, 7313, 7337, 6361, 12913, 7411, 13366, 12548, 12582, 7354, 13061",
      /*  2083 */ "9929, 7370, 5798, 8649, 10828, 12026, 7410, 5782, 7428, 12066, 8093, 8698, 8698, 8698, 8698, 8698",
      /*  2099 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12738, 7477, 8698",
      /*  2115 */ "10534, 8279, 7503, 7519, 7545, 10029, 8878, 12579, 13424, 6361, 12963, 6448, 7561, 8966, 5942",
      /*  2130 */ "12581, 9973, 6364, 9066, 9374, 7599, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582",
      /*  2145 */ "7354, 7411, 7411, 13368, 5798, 11896, 7411, 7247, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698",
      /*  2161 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 7615",
      /*  2177 */ "12984, 8698, 11701, 10542, 8919, 7640, 7666, 10029, 8878, 12579, 13424, 6361, 7347, 7682, 12462",
      /*  2192 */ "8966, 5942, 12581, 9973, 6364, 10165, 6318, 7698, 12583, 7722, 13425, 6361, 13014, 7411, 7744",
      /*  2207 */ "12548, 12628, 7354, 7795, 7411, 13368, 7813, 8041, 7411, 7297, 7862, 7881, 7925, 7961, 8093, 8698",
      /*  2223 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2239 */ "8698, 9626, 6192, 10037, 12884, 7987, 12509, 8031, 8064, 10029, 8878, 12579, 8080, 13635, 7347",
      /*  2254 */ "8113, 9433, 8966, 5942, 8740, 9973, 8129, 8150, 7411, 13932, 12540, 8172, 6048, 8212, 8235, 8259",
      /*  2270 */ "13366, 9954, 12582, 7354, 8313, 8341, 13368, 5798, 11896, 8360, 13824, 7411, 8219, 13119, 11033",
      /*  2285 */ "8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2301 */ "8698, 8698, 8698, 9626, 8383, 8698, 10534, 10542, 7487, 11503, 8409, 8425, 8462, 8504, 8530, 10246",
      /*  2317 */ "8571, 13299, 9019, 8966, 8600, 12581, 8640, 8665, 9066, 7411, 13932, 8681, 8715, 10411, 8756, 8793",
      /*  2333 */ "12937, 13366, 8815, 7771, 8543, 8853, 10510, 8894, 8935, 10436, 8951, 8992, 9035, 8584, 9053, 10079",
      /*  2349 */ "9087, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2365 */ "8698, 8698, 8698, 9626, 6192, 12325, 10796, 10804, 9493, 9108, 9145, 10029, 8878, 9161, 13424",
      /*  2380 */ "10940, 7347, 9189, 10934, 8966, 11138, 9205, 13339, 6364, 9066, 7411, 13932, 12583, 5755, 13425",
      /*  2395 */ "11938, 9066, 7411, 13366, 12548, 12582, 6297, 7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411",
      /*  2410 */ "5782, 9226, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2426 */ "8698, 8698, 8698, 8698, 8698, 8698, 9255, 8909, 9767, 11994, 9288, 8555, 9325, 9356, 10029, 8878",
      /*  2442 */ "12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581, 9973, 6364, 9066, 13069, 13603, 12583",
      /*  2457 */ "5755, 13425, 6361, 9066, 9372, 13366, 8728, 12582, 7354, 7411, 7411, 13368, 9390, 9429, 7411, 9449",
      /*  2473 */ "14005, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2489 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7259, 11503, 9465, 10029",
      /*  2505 */ "9481, 12579, 13424, 9509, 7347, 11331, 8015, 8966, 5942, 12581, 9973, 6364, 9066, 7411, 13932",
      /*  2520 */ "12583, 5755, 13320, 6361, 9066, 7411, 13753, 12548, 9532, 7354, 7411, 9550, 13368, 5798, 11896",
      /*  2535 */ "7411, 13034, 7411, 5782, 8367, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2551 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 12499, 7321, 13231, 10542, 11171, 9567",
      /*  2567 */ "9602, 9618, 9886, 9642, 7779, 9691, 7347, 9715, 9731, 9783, 9832, 12581, 9973, 6364, 9861, 9902",
      /*  2583 */ "9921, 12583, 9945, 9970, 9989, 9066, 7411, 10014, 12548, 12727, 10053, 7411, 13841, 10105, 10130",
      /*  2598 */ "7529, 7411, 13034, 7411, 5782, 10152, 11033, 10181, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2614 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487",
      /*  2630 */ "11503, 7411, 10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581, 9973, 6364, 9066",
      /*  2646 */ "7411, 13932, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411, 13368",
      /*  2661 */ "5798, 11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2677 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542",
      /*  2693 */ "7487, 11503, 7411, 10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 7144, 12581, 9973, 6364",
      /*  2709 */ "9066, 7411, 13932, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411",
      /*  2724 */ "13368, 5798, 11896, 7411, 13034, 9905, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2740 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534",
      /*  2756 */ "8297, 10202, 10218, 10262, 10029, 7186, 12579, 10278, 8156, 7971, 9037, 5739, 10320, 10360, 8827",
      /*  2771 */ "10427, 10452, 10480, 7411, 10502, 12583, 5755, 13425, 6361, 13715, 13907, 13366, 12548, 12582, 7354",
      /*  2786 */ "7411, 7411, 10526, 10558, 11896, 7411, 13034, 7411, 7234, 13119, 10581, 8093, 8698, 8698, 8698",
      /*  2801 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626",
      /*  2817 */ "6192, 8698, 10534, 10542, 10765, 10607, 10634, 10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739",
      /*  2832 */ "8966, 11110, 10650, 7116, 6364, 9066, 7412, 7945, 10136, 5755, 6933, 6361, 9066, 7411, 13366, 12548",
      /*  2848 */ "12582, 7354, 7865, 7411, 10670, 5798, 11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698",
      /*  2863 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2879 */ "8698, 9626, 6192, 8698, 7909, 7286, 8393, 10693, 10737, 10375, 10753, 12579, 11828, 6361, 10781",
      /*  2894 */ "9037, 10820, 10844, 5942, 11150, 6695, 10870, 12796, 10895, 10920, 8097, 5755, 13425, 6361, 10956",
      /*  2909 */ "10713, 13026, 10981, 7728, 11025, 11049, 11069, 11098, 11126, 11187, 11800, 11210, 11238, 5782",
      /*  2923 */ "13119, 11278, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  2939 */ "8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 9309, 11304, 11320, 11347, 11374, 8878",
      /*  2954 */ "12579, 11390, 8799, 11288, 11434, 11450, 9340, 5942, 12271, 11490, 6364, 11539, 7411, 9129, 7583",
      /*  2969 */ "5755, 13425, 6361, 11555, 12237, 13366, 12548, 10677, 11194, 7411, 7411, 13368, 5798, 11896, 6339",
      /*  2984 */ "13034, 7411, 11251, 13778, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3000 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 11571, 7411",
      /*  3016 */ "10029, 8878, 11605, 13424, 12349, 7347, 9037, 5739, 9876, 5942, 12581, 12303, 12296, 9066, 7411",
      /*  3031 */ "13932, 11621, 11645, 9816, 6361, 9066, 7411, 7573, 12548, 8134, 11669, 7411, 7411, 11693, 5798",
      /*  3046 */ "11896, 7411, 13034, 11717, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3062 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 13239, 7487",
      /*  3078 */ "11503, 11739, 11755, 11779, 11816, 11844, 11860, 7347, 11916, 11404, 8966, 5942, 5954, 9973, 11582",
      /*  3093 */ "11932, 8344, 13932, 5804, 5755, 13425, 11954, 9066, 11979, 12018, 12042, 9845, 12058, 6406, 7411",
      /*  3108 */ "12082, 12111, 12145, 14055, 13034, 6385, 5782, 13153, 11474, 12168, 8698, 8698, 8698, 8698, 8698",
      /*  3123 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12193, 11161, 5855",
      /*  3139 */ "11963, 7080, 11222, 12218, 12253, 12665, 10854, 12269, 13424, 12698, 7347, 11053, 12287, 9746, 5942",
      /*  3154 */ "12319, 9404, 11523, 12341, 7411, 12229, 12365, 12389, 13425, 12423, 9239, 12448, 13366, 12548, 9699",
      /*  3169 */ "12152, 13388, 7411, 12486, 5798, 7650, 7411, 13034, 9119, 12525, 13119, 12564, 8093, 8698, 8698",
      /*  3184 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3200 */ "9626, 7624, 8698, 10534, 10542, 7487, 11503, 12599, 10029, 8878, 12579, 13424, 6361, 7347, 11358",
      /*  3215 */ "11900, 8966, 12615, 8612, 11763, 7454, 10291, 9578, 11514, 12583, 12650, 13425, 12875, 13287, 12692",
      /*  3230 */ "13967, 12714, 12766, 12782, 9586, 13726, 12824, 12840, 12864, 7411, 10304, 13146, 12926, 12900",
      /*  3244 */ "12953, 12979, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3260 */ "8698, 8698, 8698, 8698, 9626, 6192, 11653, 9301, 8288, 13000, 13050, 13085, 10029, 8878, 12579",
      /*  3275 */ "13424, 6361, 7347, 11262, 11082, 8966, 5942, 12581, 9973, 6364, 13593, 13101, 13135, 12583, 13169",
      /*  3290 */ "13185, 7900, 9066, 13201, 13221, 10114, 13255, 7354, 7411, 7411, 13368, 5798, 11896, 7411, 13273",
      /*  3305 */ "7411, 5782, 13119, 11033, 13315, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3321 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 11503, 7411, 10029",
      /*  3337 */ "8878, 12579, 13424, 6361, 7347, 9037, 7442, 8966, 5942, 5760, 13563, 6364, 9066, 7411, 13932, 12583",
      /*  3353 */ "5755, 13336, 12470, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411, 13368, 5798, 11896, 7411",
      /*  3368 */ "13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3384 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 14091, 11465, 12002, 8488, 13355, 7411",
      /*  3400 */ "10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581, 9973, 6364, 9066, 10229",
      /*  3415 */ "13932, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411, 13368, 5798",
      /*  3430 */ "11896, 7411, 13034, 7411, 9516, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3446 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487",
      /*  3462 */ "11503, 7411, 10996, 8878, 12579, 13424, 6361, 10089, 9037, 5739, 8966, 5942, 12581, 9973, 6364",
      /*  3477 */ "9066, 7411, 13613, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 13384",
      /*  3492 */ "13368, 5798, 7891, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3508 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534",
      /*  3524 */ "10542, 7487, 11503, 13404, 11875, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581",
      /*  3539 */ "9973, 6364, 9006, 7411, 13932, 12583, 5755, 8002, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411",
      /*  3555 */ "7411, 13368, 5798, 9413, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698",
      /*  3571 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698",
      /*  3587 */ "10534, 10542, 7487, 11503, 7411, 10029, 8878, 12579, 13424, 6361, 7347, 10618, 5739, 8966, 5942",
      /*  3602 */ "12581, 9973, 6364, 9066, 7411, 13932, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582",
      /*  3617 */ "7354, 7411, 13205, 13368, 5798, 11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698",
      /*  3632 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3648 */ "8698, 8698, 8698, 8698, 8698, 8698, 9796, 9808, 12750, 12129, 8698, 8698, 8698, 8698, 5465, 8698",
      /*  3664 */ "8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053",
      /*  3680 */ "8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3696 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3712 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8777, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3728 */ "8698, 7384, 8698, 8698, 8698, 8698, 8698, 8698, 5672, 13422, 8698, 8698, 8698, 8698, 8698, 14148",
      /*  3744 */ "8698, 8698, 8698, 8698, 8698, 13420, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3760 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3776 */ "8698, 13684, 8698, 8698, 8698, 12634, 13441, 13685, 12750, 12129, 8698, 8698, 8698, 7839, 5465",
      /*  3791 */ "8698, 8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698",
      /*  3807 */ "7053, 8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3823 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3839 */ "8698, 8698, 8698, 8698, 14123, 13460, 13517, 13518, 13676, 8698, 12129, 8698, 8698, 8698, 8698",
      /*  3854 */ "8698, 13534, 8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698",
      /*  3870 */ "8698, 7053, 8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3886 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3902 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12676, 13554, 10029, 8878, 12579, 13424, 6361, 7347",
      /*  3918 */ "7797, 5739, 8966, 5942, 12581, 9973, 6364, 9066, 7411, 11078, 12583, 5755, 13425, 6361, 9066, 7411",
      /*  3934 */ "8323, 12548, 12582, 7354, 7411, 7411, 8325, 5798, 11896, 7411, 13579, 13629, 5782, 13119, 11677",
      /*  3949 */ "8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  3965 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12129, 8698, 8698, 8698",
      /*  3981 */ "8698, 8698, 8698, 8698, 10401, 8698, 8698, 8698, 8698, 8698, 8698, 8699, 8697, 8698, 8698, 8698",
      /*  3997 */ "8698, 8698, 7053, 8698, 8698, 8698, 8698, 8698, 8695, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4013 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4029 */ "8698, 8698, 8698, 9626, 6192, 8698, 9998, 13651, 13701, 13742, 10704, 10029, 8878, 12579, 13424",
      /*  4044 */ "6361, 11791, 9071, 5739, 8966, 5942, 12581, 9973, 6364, 9066, 7411, 13932, 12583, 5755, 13425, 6361",
      /*  4060 */ "9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411, 5782",
      /*  4075 */ "13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4091 */ "8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 11503, 7411, 10029, 8878, 12579",
      /*  4107 */ "13424, 6361, 7347, 9037, 5739, 8966, 7758, 12581, 9973, 6364, 9066, 7411, 13932, 12583, 5755, 13425",
      /*  4123 */ "6361, 9066, 7411, 13366, 10879, 12582, 7354, 7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411",
      /*  4138 */ "5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4154 */ "8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 11503, 7411, 10029, 8878",
      /*  4170 */ "12579, 13424, 6361, 13769, 9037, 5739, 8966, 5942, 12581, 9973, 10904, 9066, 7411, 13932, 12583",
      /*  4185 */ "5755, 13425, 10486, 13794, 7411, 13816, 12548, 12582, 7354, 13840, 7411, 13368, 5798, 11896, 9551",
      /*  4200 */ "13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4216 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 13857, 13869",
      /*  4232 */ "10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 7758, 12581, 9973, 6364, 9066, 7411, 13932",
      /*  4248 */ "12583, 5755, 13425, 6361, 9066, 7411, 13366, 10879, 12582, 7354, 7411, 7411, 13368, 5798, 11896",
      /*  4263 */ "7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4279 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 11503",
      /*  4295 */ "13885, 10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581, 9973, 6364, 9066, 7411",
      /*  4311 */ "13932, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411, 13368, 5798",
      /*  4326 */ "11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4342 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487",
      /*  4358 */ "11503, 7411, 10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581, 9973, 6364",
      /*  4373 */ "13901, 7411, 13932, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411",
      /*  4388 */ "13368, 5798, 11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4404 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534",
      /*  4420 */ "10542, 7487, 11503, 7411, 10029, 8878, 12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581",
      /*  4435 */ "9973, 6364, 9066, 7411, 13923, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354",
      /*  4450 */ "7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411, 5782, 12808, 11033, 8093, 8698, 8698, 8698, 8698",
      /*  4466 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192",
      /*  4482 */ "8698, 10534, 10542, 7487, 11503, 7411, 10029, 8878, 12579, 13424, 6361, 7936, 9037, 5739, 8966",
      /*  4497 */ "7758, 12581, 9973, 6364, 9066, 7411, 13932, 12583, 5755, 13425, 6361, 9066, 7411, 13366, 10879",
      /*  4512 */ "12582, 7354, 7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411, 13956, 13119, 11033, 8093, 8698",
      /*  4527 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4543 */ "8698, 9626, 6192, 8698, 10534, 10542, 7487, 11503, 13983, 10029, 8878, 12579, 13424, 6361, 7347",
      /*  4558 */ "13800, 5739, 8966, 5942, 12581, 9973, 6364, 9066, 7411, 13932, 12583, 5755, 13425, 6361, 13999",
      /*  4573 */ "7411, 13366, 12548, 12582, 7354, 7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411, 5782, 13119",
      /*  4588 */ "11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4604 */ "8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 14021, 14033, 10029, 8878, 12579",
      /*  4619 */ "13424, 6361, 7347, 9037, 5739, 8966, 7758, 12581, 9973, 6364, 9066, 7411, 13932, 12583, 5755, 13425",
      /*  4635 */ "6361, 9066, 7411, 13366, 10879, 12582, 7354, 7411, 7411, 13368, 5798, 11896, 7411, 13034, 7411",
      /*  4650 */ "5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4666 */ "8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487, 11503, 7411, 10029, 8878",
      /*  4682 */ "12579, 13424, 6361, 7347, 9037, 5739, 8966, 5942, 12581, 9973, 6364, 14049, 7411, 13932, 12583",
      /*  4697 */ "5755, 13425, 6361, 9066, 7411, 13366, 12548, 12582, 7354, 7411, 7411, 13368, 5798, 11896, 7411",
      /*  4712 */ "13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4728 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 14118, 14113, 5224, 14085, 5223, 14071, 14107",
      /*  4743 */ "14139, 8698, 12129, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 10401, 8698, 8698, 8698, 8698, 8698",
      /*  4759 */ "8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698, 8698, 8695, 8698",
      /*  4775 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4791 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8440, 8698, 14173, 14164, 11009",
      /*  4807 */ "14171, 8698, 12129, 8771, 8698, 8698, 8698, 8698, 8698, 8698, 10401, 8698, 8698, 8698, 8698, 8698",
      /*  4823 */ "8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698, 8698, 8695, 8698",
      /*  4839 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4855 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 12407, 14201, 6000, 5996, 14189, 14225",
      /*  4871 */ "14217, 8698, 12129, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 10401, 8698, 8698, 8698, 8698, 8698",
      /*  4887 */ "8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698, 8698, 8695, 8698",
      /*  4903 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4919 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4935 */ "8698, 9761, 8476, 12579, 13424, 6361, 7347, 7797, 5739, 8966, 5942, 12581, 9973, 6364, 8014, 7411",
      /*  4951 */ "11078, 12583, 5755, 13425, 6361, 9066, 7411, 8323, 12548, 12582, 7354, 7411, 7411, 8325, 5798",
      /*  4966 */ "11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  4982 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 9626, 6192, 8698, 10534, 10542, 7487",
      /*  4998 */ "11503, 7411, 10029, 8878, 12579, 13424, 6361, 7347, 7797, 5739, 8966, 5942, 12581, 9973, 6364, 9066",
      /*  5014 */ "7411, 11078, 12583, 5755, 13425, 6361, 9066, 7411, 8323, 12548, 12582, 7354, 7411, 7411, 8325, 5798",
      /*  5030 */ "11896, 7411, 13034, 7411, 5782, 13119, 11033, 8093, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  5046 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 10334, 5162, 5159, 10344, 5120, 5130",
      /*  5062 */ "5127, 5146, 9272, 12129, 8698, 8698, 8698, 12122, 8698, 8698, 8698, 10401, 8698, 8698, 8698, 8698",
      /*  5078 */ "8698, 8698, 8699, 8697, 8698, 8698, 8698, 8698, 8698, 7053, 8698, 8698, 8698, 8698, 8698, 8695",
      /*  5094 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698",
      /*  5110 */ "8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 8698, 24576, 0, 24576, 0, 0, 24576, 24576",
      /*  5127 */ "24576, 24576, 24576, 24576, 24576, 24576, 0, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576",
      /*  5142 */ "24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 0, 0, 0, 24576, 24576, 24576, 24576, 0, 0",
      /*  5159 */ "24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576, 24576",
      /*  5173 */ "24576, 24576, 0, 24576, 24576, 0, 0, 0, 26624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26624, 0, 0, 0, 0, 0, 0",
      /*  5198 */ "0, 0, 0, 0, 187, 0, 0, 0, 26624, 0, 0, 187, 0, 187, 0, 0, 187, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 0, 0",
      /*  5226 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161792, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0",
      /*  5256 */ "155, 0, 155, 155, 0, 155, 155, 155, 155, 155, 155, 155, 155, 155, 0, 0, 0, 155, 0, 0, 0, 155, 155",
      /*  5279 */ "155, 155, 155, 0, 0, 0, 0, 400, 279, 20480, 0, 282, 282, 0, 0, 0, 0, 0, 0, 0, 594, 400, 401, 401, 0",
      /*  5304 */ "0, 0, 0, 0, 0, 22528, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3072, 0, 0, 0, 0, 135, 0, 0",
      /*  5333 */ "135, 0, 0, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0, 0, 0, 0, 0, 135, 135, 0, 0, 0, 135, 135, 135, 0, 0",
      /*  5361 */ "0, 135, 0, 135, 135, 0, 135, 135, 135, 135, 135, 0, 135, 135, 135, 0, 135, 135, 135, 135, 135, 135",
      /*  5383 */ "135, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 156, 0, 156, 156, 0, 156, 156, 156, 156",
      /*  5409 */ "156, 156, 156, 156, 156, 0, 0, 0, 156, 0, 0, 0, 156, 156, 156, 156, 156, 506, 0, 0, 0, 0, 0, 0, 0",
      /*  5434 */ "0, 0, 0, 0, 0, 0, 0, 0, 504, 0, 400, 21504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4241, 4241",
      /*  5462 */ "4241, 0, 29834, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 29834, 0, 0, 0, 0, 0",
      /*  5491 */ "0, 0, 0, 0, 29696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40069, 0, 0, 0, 0, 29696, 29696, 0, 0",
      /*  5519 */ "0, 0, 0, 0, 0, 0, 29696, 29696, 29696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 29834, 29696, 0, 0, 0, 0",
      /*  5545 */ "0, 171, 0, 171, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  5576 */ "29696, 0, 0, 0, 29834, 0, 29834, 29834, 29834, 29834, 29834, 29834, 29834, 29834, 29696, 29696",
      /*  5592 */ "29696, 29834, 29696, 29696, 29696, 29696, 29696, 29696, 29696, 29696, 0, 0, 30720, 30720, 30720",
      /*  5607 */ "30720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30720, 0, 0, 0, 0, 0, 30720, 30720, 0, 30720, 30720",
      /*  5632 */ "0, 30720, 30720, 0, 30720, 0, 30720, 0, 0, 0, 0, 208, 32976, 208, 32976, 208, 208, 32976, 208, 208",
      /*  5652 */ "208, 208, 32976, 208, 208, 208, 208, 0, 0, 0, 32976, 0, 0, 0, 208, 32976, 32976, 32976, 32976, 449",
      /*  5672 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 505, 0, 0, 33792, 0, 0, 0, 33792, 0, 0, 0, 0, 0, 0, 0",
      /*  5702 */ "0, 0, 0, 0, 33792, 0, 33792, 0, 0, 0, 0, 0, 209, 35025, 209, 35025, 209, 209, 35025, 209, 209, 209",
      /*  5724 */ "209, 209, 0, 0, 0, 35025, 0, 0, 0, 209, 35025, 35025, 35025, 35025, 449, 146, 146, 146, 0, 146, 146",
      /*  5745 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 401, 0, 0, 146, 146, 0, 146, 146, 0, 0, 0, 0, 0",
      /*  5768 */ "0, 0, 0, 0, 0, 419, 0, 0, 146, 146, 146, 146, 487, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 146",
      /*  5794 */ "146, 146, 146, 146, 0, 400, 401, 0, 146, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 501, 0, 0, 0, 400",
      /*  5820 */ "35840, 35840, 35840, 0, 210, 0, 210, 0, 210, 210, 0, 210, 210, 210, 36050, 210, 36050, 0, 0, 0",
      /*  5840 */ "36050, 0, 0, 0, 210, 210, 210, 210, 210, 0, 0, 0, 0, 133, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152",
      /*  5867 */ "0, 0, 0, 0, 268, 0, 0, 268, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 268, 268, 268, 268",
      /*  5895 */ "268, 268, 268, 268, 268, 268, 0, 0, 0, 0, 0, 332, 334, 0, 336, 268, 268, 268, 0, 0, 268, 268, 268",
      /*  5918 */ "268, 268, 268, 268, 268, 268, 268, 268, 0, 0, 0, 268, 268, 0, 0, 0, 0, 262, 0, 0, 0, 0, 267, 268, 0",
      /*  5943 */ "0, 0, 0, 0, 0, 279, 0, 0, 282, 0, 0, 0, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 418, 0, 0, 0, 268, 268",
      /*  5972 */ "268, 268, 268, 268, 268, 0, 0, 0, 0, 0, 445, 0, 447, 0, 0, 0, 0, 0, 42173, 0, 42173, 0, 0, 42173, 0",
      /*  5997 */ "0, 0, 0, 0, 0, 0, 164864, 164864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 268, 268, 268, 268, 268",
      /*  6022 */ "268, 0, 268, 268, 268, 268, 268, 268, 268, 268, 268, 0, 0, 0, 0, 0, 268, 268, 401, 0, 0, 268, 268",
      /*  6045 */ "0, 268, 268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98304, 0, 0, 530, 146, 146, 0, 268, 268, 268, 453, 268",
      /*  6070 */ "268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 133, 0, 268, 268, 268",
      /*  6090 */ "268, 268, 268, 0, 268, 268, 268, 268, 0, 0, 0, 0, 0, 0, 0, 0, 400, 401, 0, 268, 0, 268, 0, 0, 0, 0",
      /*  6116 */ "0, 0, 0, 0, 0, 0, 279, 19736, 0, 0, 0, 0, 0, 268, 268, 268, 268, 268, 268, 0, 268, 268, 268, 268",
      /*  6140 */ "268, 268, 268, 268, 268, 268, 0, 0, 0, 0, 0, 0, 0, 0, 268, 268, 268, 268, 268, 268, 268, 268, 0, 0",
      /*  6164 */ "0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 0, 279, 282, 0, 0, 0, 268, 268, 268, 268",
      /*  6192 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 268, 268, 268, 268, 0, 0, 0, 268, 268, 268, 0, 0",
      /*  6220 */ "0, 268, 268, 268, 0, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 0, 0, 0, 0, 10451",
      /*  6242 */ "0, 10451, 0, 10451, 10451, 0, 10451, 10451, 10451, 10451, 10451, 0, 0, 0, 10451, 0, 0, 0, 10451",
      /*  6261 */ "10451, 10451, 10451, 10451, 0, 0, 0, 0, 133, 134, 8455, 7432, 10377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  6284 */ "0, 0, 0, 0, 0, 10377, 16719, 11600, 10451, 146, 146, 146, 0, 0, 146, 146, 146, 146, 146, 146, 146",
      /*  6305 */ "146, 146, 146, 146, 0, 0, 0, 141458, 12737, 146, 146, 146, 6597, 146, 146, 146, 146, 146, 146, 146",
      /*  6325 */ "146, 146, 146, 146, 473, 146, 146, 146, 146, 146, 146, 146, 146, 627, 146, 146, 146, 146, 146, 146",
      /*  6345 */ "146, 146, 146, 146, 146, 669, 146, 146, 146, 146, 146, 146, 146, 146, 146, 127122, 146, 146, 146",
      /*  6364 */ "146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 124050, 146, 126098, 146",
      /*  6386 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 691, 146, 146, 693, 694, 146, 146, 146, 146",
      /*  6405 */ "100498, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 81042, 146, 146, 146, 146, 146, 146",
      /*  6424 */ "146, 146, 628, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 13645, 146",
      /*  6445 */ "146, 146, 125074, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 344, 146, 133, 9592",
      /*  6464 */ "146, 146, 146, 146, 146, 629, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 542, 0",
      /*  6485 */ "543, 4241, 0, 0, 0, 0, 0, 0, 0, 4241, 4241, 4241, 4241, 4241, 0, 0, 0, 0, 4241, 4241, 4241, 4241",
      /*  6507 */ "4241, 0, 0, 4241, 4241, 4241, 0, 4241, 0, 4241, 0, 4241, 4241, 0, 4241, 4241, 4241, 4241, 4241",
      /*  6526 */ "4241, 0, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  6547 */ "4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 133",
      /*  6564 */ "0, 0, 0, 0, 0, 133, 4096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  6594 */ "37888, 4241, 0, 0, 4241, 4241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33792, 0, 4241, 4241",
      /*  6619 */ "4241, 0, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241",
      /*  6636 */ "4241, 4241, 4241, 4241, 0, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 4241, 0, 0",
      /*  6654 */ "0, 4241, 401, 0, 0, 4241, 4241, 0, 4241, 4241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 0, 0, 0, 0, 0",
      /*  6680 */ "135, 0, 0, 0, 0, 135, 0, 0, 0, 400, 401, 0, 4241, 0, 4241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 430, 146",
      /*  6707 */ "146, 146, 146, 146, 4241, 4241, 4241, 0, 0, 0, 0, 0, 4241, 0, 0, 0, 0, 0, 0, 4241, 0, 0, 0, 0, 0, 0",
      /*  6733 */ "0, 0, 279, 282, 0, 0, 0, 4241, 0, 0, 4241, 0, 0, 0, 0, 0, 0, 0, 0, 4241, 4241, 4241, 4241, 0, 0, 0",
      /*  6759 */ "0, 0, 0, 0, 0, 4241, 4241, 4241, 4241, 4241, 4241, 0, 4241, 4241, 4241, 4241, 0, 0, 0, 0, 0, 0, 0",
      /*  6782 */ "4241, 4241, 4241, 4241, 0, 0, 0, 4241, 4241, 4241, 0, 0, 0, 4241, 4241, 4241, 0, 341, 4241, 4241",
      /*  6802 */ "4241, 4241, 4241, 4241, 4241, 4241, 4241, 0, 0, 0, 0, 0, 4241, 4241, 0, 4241, 4241, 4241, 4241, 0",
      /*  6822 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 37888, 37888, 0, 0, 37888, 0, 37888, 0, 0, 37888, 0",
      /*  6848 */ "0, 0, 0, 0, 0, 0, 0, 0, 37888, 37888, 37888, 0, 37888, 0, 0, 0, 0, 133, 0, 0, 133, 0, 0, 0, 0, 0, 0",
      /*  6875 */ "0, 39100, 133, 0, 0, 0, 0, 0, 0, 0, 133, 133, 133, 133, 133, 0, 0, 0, 0, 133, 133, 133, 133, 133, 0",
      /*  6900 */ "0, 133, 133, 133, 0, 133, 39100, 133, 39100, 133, 133, 39100, 133, 133, 133, 133, 133, 133, 133",
      /*  6919 */ "39151, 133, 133, 133, 133, 133, 133, 133, 133, 0, 0, 0, 0, 3072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  6945 */ "0, 146, 82066, 146, 0, 0, 0, 136, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0, 136, 136, 0, 0, 0, 0, 0, 0, 0",
      /*  6973 */ "136, 136, 0, 0, 0, 136, 136, 136, 136, 0, 136, 136, 136, 0, 136, 136, 136, 136, 136, 136, 136, 0, 0",
      /*  6996 */ "0, 136, 0, 136, 136, 0, 136, 136, 136, 136, 44168, 0, 0, 0, 0, 139, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0",
      /*  7022 */ "0, 0, 0, 0, 0, 146, 0, 0, 139, 139, 139, 146, 0, 139, 146, 0, 139, 0, 0, 0, 0, 180, 139, 146, 0, 0",
      /*  7048 */ "0, 0, 0, 497, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 401, 0, 0, 0, 0, 0, 0, 146, 146, 146, 203, 146, 139",
      /*  7075 */ "146, 139, 146, 146, 139, 146, 146, 146, 146, 146, 0, 152, 0, 0, 146, 161, 146, 161, 146, 0, 0, 146",
      /*  7097 */ "146, 146, 146, 219, 219, 237, 241, 245, 249, 245, 252, 252, 252, 252, 252, 0, 302, 0, 0, 0, 0, 0, 0",
      /*  7120 */ "0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 434, 146, 146, 318, 146, 146, 146, 146, 146, 146, 146, 146, 0",
      /*  7143 */ "328, 0, 0, 0, 0, 0, 0, 279, 0, 0, 282, 0, 0, 0, 146, 146, 50176, 146, 146, 355, 146, 146, 361, 146",
      /*  7167 */ "146, 146, 146, 146, 146, 146, 349, 133, 9592, 349, 0, 387, 0, 0, 134, 8455, 7432, 0, 0, 5387, 146",
      /*  7188 */ "0, 0, 0, 0, 0, 0, 0, 0, 279, 282, 283, 0, 0, 146, 0, 146, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  7217 */ "0, 0, 30720, 0, 146, 146, 146, 467, 146, 146, 146, 146, 146, 146, 146, 146, 474, 146, 146, 146, 0",
      /*  7238 */ "0, 0, 0, 0, 110592, 0, 0, 146, 110738, 146, 146, 146, 0, 0, 0, 0, 679, 146, 0, 0, 0, 0, 0, 0, 146",
      /*  7263 */ "0, 178, 146, 0, 178, 178, 0, 0, 0, 0, 0, 194, 478, 146, 479, 146, 146, 146, 146, 9592, 146, 146",
      /*  7285 */ "459, 146, 146, 146, 146, 146, 0, 159, 0, 0, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 146, 680, 0, 0",
      /*  7309 */ "0, 0, 0, 146, 401, 508, 0, 146, 146, 0, 513, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0",
      /*  7336 */ "154, 0, 0, 0, 0, 526, 0, 527, 0, 0, 0, 0, 0, 0, 146, 146, 146, 0, 0, 146, 146, 146, 146, 146, 146",
      /*  7361 */ "146, 146, 146, 146, 146, 0, 0, 0, 146, 146, 146, 146, 146, 9797, 146, 146, 146, 146, 0, 0, 0, 0",
      /*  7383 */ "646, 0, 0, 0, 0, 0, 279, 278, 0, 282, 281, 0, 0, 0, 0, 0, 0, 0, 36864, 0, 0, 36864, 0, 0, 36864, 0",
      /*  7409 */ "36864, 685, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 477",
      /*  7428 */ "146, 146, 146, 146, 706, 146, 146, 146, 146, 0, 0, 709, 0, 711, 146, 146, 146, 0, 146, 146, 146",
      /*  7449 */ "146, 146, 146, 146, 378, 146, 146, 146, 146, 146, 441, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20757",
      /*  7472 */ "282, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  7502 */ "146, 0, 132, 132, 146, 173, 132, 146, 173, 132, 132, 173, 173, 173, 0, 0, 191, 198, 198, 198, 204",
      /*  7523 */ "146, 0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 0, 146, 146, 146, 660, 146, 146, 146",
      /*  7544 */ "146, 198, 198, 198, 198, 220, 220, 220, 198, 246, 246, 246, 220, 220, 220, 220, 220, 146, 146, 146",
      /*  7564 */ "0, 344, 146, 146, 146, 344, 146, 146, 344, 146, 146, 146, 146, 146, 146, 9797, 146, 146, 584, 146",
      /*  7584 */ "0, 0, 0, 0, 0, 0, 498, 0, 0, 0, 0, 0, 0, 92160, 400, 146, 146, 146, 480, 146, 146, 146, 9592, 146",
      /*  7608 */ "146, 146, 146, 146, 146, 146, 476, 0, 129, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 144, 0, 0, 0",
      /*  7635 */ "0, 0, 146, 0, 0, 146, 146, 146, 205, 146, 0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 0",
      /*  7658 */ "146, 659, 146, 146, 146, 146, 78994, 146, 146, 146, 146, 146, 221, 221, 221, 146, 221, 221, 221",
      /*  7677 */ "253, 253, 253, 253, 253, 146, 146, 356, 146, 146, 146, 146, 146, 369, 146, 146, 146, 146, 146, 133",
      /*  7697 */ "9592, 146, 146, 146, 146, 146, 49298, 146, 9592, 146, 146, 146, 146, 146, 146, 146, 146, 146, 565",
      /*  7716 */ "146, 146, 146, 146, 146, 146, 401, 0, 0, 146, 146, 512, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 606, 0",
      /*  7741 */ "0, 0, 0, 146, 146, 146, 146, 146, 73874, 9797, 146, 146, 146, 146, 0, 0, 587, 0, 0, 0, 0, 0, 279",
      /*  7764 */ "279, 0, 282, 282, 0, 0, 0, 146, 146, 0, 600, 0, 0, 0, 603, 0, 0, 0, 0, 0, 0, 0, 0, 0, 313, 0, 0, 0",
      /*  7792 */ "0, 315, 146, 146, 617, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 133, 0",
      /*  7813 */ "0, 400, 401, 0, 146, 0, 146, 0, 0, 0, 0, 0, 653, 0, 0, 0, 0, 0, 0, 35840, 35840, 0, 0, 35840, 35840",
      /*  7838 */ "35840, 0, 0, 0, 0, 0, 0, 25600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27648, 39936, 43008, 0, 0, 0, 146",
      /*  7863 */ "146, 686, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 624, 146, 146, 146, 696",
      /*  7883 */ "697, 698, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 146, 146, 112640, 146, 146, 146, 146, 146, 146",
      /*  7905 */ "146, 146, 538, 146, 146, 0, 0, 0, 0, 0, 0, 159, 146, 160, 146, 146, 146, 0, 0, 0, 146, 704, 146",
      /*  7928 */ "146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 146, 146, 340, 0, 0, 146, 146, 146, 146, 146, 146, 146",
      /*  7951 */ "146, 9592, 146, 146, 146, 146, 146, 146, 490, 136338, 146, 146, 157842, 146, 0, 0, 0, 146, 146, 720",
      /*  7971 */ "0, 0, 0, 146, 146, 146, 0, 0, 146, 146, 146, 146, 146, 146, 146, 352, 146, 146, 164, 146, 146, 0",
      /*  7993 */ "158, 0, 0, 146, 146, 146, 164, 146, 169, 0, 0, 0, 0, 0, 64512, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146",
      /*  8018 */ "0, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 365, 146, 146, 146, 206, 146, 0, 146, 0",
      /*  8039 */ "146, 146, 0, 146, 146, 146, 146, 146, 658, 0, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146",
      /*  8060 */ "0, 15902, 18975, 146, 146, 146, 146, 146, 222, 222, 238, 146, 222, 238, 222, 222, 222, 222, 257",
      /*  8079 */ "257, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /*  8108 */ "0, 0, 503, 0, 400, 146, 146, 146, 357, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 133, 9592",
      /*  8129 */ "436, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83968, 0, 0, 0, 0, 450, 146, 146",
      /*  8154 */ "6597, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 305, 0, 0, 0, 401, 0, 0, 146",
      /*  8176 */ "146, 0, 146, 146, 0, 0, 0, 0, 0, 53248, 0, 0, 0, 0, 0, 279, 279, 401, 282, 19456, 0, 0, 0, 0, 0, 0",
      /*  8202 */ "0, 26811, 0, 0, 0, 0, 26624, 26624, 26624, 26624, 146, 146, 146, 146, 146, 53394, 146, 146, 146",
      /*  8221 */ "146, 0, 0, 0, 0, 0, 0, 700, 702, 146, 146, 146, 146, 146, 0, 146, 146, 146, 6597, 146, 146, 548",
      /*  8243 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 567, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146",
      /*  8263 */ "146, 113810, 146, 146, 146, 146, 568, 146, 146, 146, 146, 146, 139, 157, 139, 139, 146, 146, 146",
      /*  8282 */ "146, 146, 0, 0, 132, 132, 146, 146, 146, 146, 146, 0, 0, 147, 147, 146, 146, 146, 146, 146, 0, 0",
      /*  8304 */ "167, 0, 146, 146, 146, 146, 146, 0, 0, 146, 146, 146, 146, 56466, 146, 146, 146, 146, 622, 146, 146",
      /*  8325 */ "146, 146, 146, 146, 0, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 146, 146, 116882, 146, 146, 146",
      /*  8347 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 129499, 146, 146, 146, 665, 146, 146, 146, 146",
      /*  8366 */ "666, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 710, 0, 146, 713, 0, 0, 0, 141, 0, 0, 0",
      /*  8390 */ "0, 0, 0, 0, 0, 0, 146, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 190, 146, 146, 146, 146, 146, 223, 223, 223",
      /*  8416 */ "146, 223, 223, 223, 223, 223, 223, 223, 223, 0, 0, 260, 0, 133, 134, 8455, 7432, 0, 0, 0, 0, 0, 0",
      /*  8439 */ "266, 0, 0, 0, 0, 0, 162816, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 268, 268, 268, 268, 268, 5387, 146",
      /*  8464 */ "0, 270, 0, 0, 0, 0, 0, 0, 279, 282, 0, 284, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 279, 282, 0, 0, 0, 146",
      /*  8492 */ "0, 0, 146, 0, 0, 151, 0, 0, 0, 186, 0, 197, 146, 0, 289, 290, 146, 0, 0, 0, 0, 295, 0, 0, 0, 0, 0",
      /*  8519 */ "0, 0, 31744, 0, 0, 0, 0, 0, 31744, 0, 31744, 301, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146",
      /*  8546 */ "146, 146, 612, 146, 145554, 613, 146, 146, 146, 0, 0, 0, 146, 130, 0, 165, 130, 179, 179, 130, 130",
      /*  8567 */ "130, 0, 0, 193, 0, 0, 337, 146, 146, 146, 0, 0, 342, 146, 146, 146, 347, 146, 146, 146, 0, 0, 0",
      /*  8590 */ "74752, 0, 0, 0, 0, 146, 146, 60562, 146, 67730, 396, 0, 0, 0, 0, 0, 279, 0, 0, 282, 0, 0, 0, 146",
      /*  8614 */ "146, 0, 0, 0, 0, 0, 0, 0, 0, 417, 0, 0, 0, 0, 0, 0, 279, 0, 0, 282, 0, 0, 0, 268, 268, 0, 421, 0",
      /*  8642 */ "423, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 146, 146, 0, 146, 146, 146, 146, 146, 146, 146, 663",
      /*  8665 */ "146, 437, 146, 146, 146, 146, 146, 0, 0, 0, 444, 0, 446, 0, 448, 337, 146, 0, 0, 494, 0, 0, 0, 0",
      /*  8689 */ "499, 500, 0, 0, 502, 0, 0, 400, 401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 401, 0",
      /*  8717 */ "509, 510, 511, 0, 146, 146, 0, 0, 0, 0, 519, 0, 0, 0, 0, 0, 0, 144384, 400, 0, 401, 0, 0, 0, 146",
      /*  8742 */ "146, 0, 0, 0, 412, 413, 0, 0, 0, 0, 0, 0, 0, 46080, 146, 146, 146, 535, 146, 146, 146, 146, 146",
      /*  8765 */ "146, 52224, 0, 446, 0, 448, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278, 281, 0, 0, 0",
      /*  8792 */ "0, 0, 544, 146, 146, 6597, 546, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 329, 0, 0",
      /*  8814 */ "0, 0, 0, 0, 0, 145408, 0, 0, 400, 0, 401, 0, 0, 0, 146, 146, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0",
      /*  8842 */ "0, 0, 31744, 0, 0, 31744, 0, 0, 0, 0, 31744, 146, 146, 146, 55442, 146, 618, 146, 146, 146, 146",
      /*  8863 */ "146, 146, 146, 146, 96402, 146, 0, 0, 0, 0, 134, 0, 0, 0, 0, 5387, 146, 0, 0, 0, 0, 0, 0, 0, 0, 279",
      /*  8889 */ "282, 0, 0, 0, 146, 146, 146, 146, 146, 9797, 146, 146, 146, 146, 0, 0, 0, 0, 0, 70656, 0, 0, 0, 0",
      /*  8913 */ "130, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 146, 0, 0, 0, 0, 0, 0, 181, 0, 146, 0, 400, 401, 0, 146, 0",
      /*  8941 */ "146, 0, 0, 651, 0, 0, 0, 0, 66560, 71310, 664, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146",
      /*  8962 */ "146, 146, 671, 672, 146, 0, 0, 0, 0, 134, 8455, 7432, 0, 0, 5387, 146, 0, 0, 0, 0, 0, 0, 0, 0, 279",
      /*  8987 */ "282, 0, 0, 285, 286, 146, 117906, 146, 0, 0, 0, 0, 0, 146, 0, 0, 0, 121856, 0, 0, 146, 146, 146",
      /*  9010 */ "6597, 146, 146, 146, 146, 146, 146, 146, 68754, 146, 146, 146, 0, 146, 146, 146, 146, 146, 146, 146",
      /*  9030 */ "146, 347, 146, 146, 364, 146, 122002, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146",
      /*  9049 */ "146, 146, 133, 9592, 146, 146, 146, 137362, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 146, 146, 146",
      /*  9070 */ "6597, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 373, 146, 146, 133, 9592, 72704, 146",
      /*  9089 */ "146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 542, 0, 543, 199, 199, 199, 0, 146, 0, 146, 0",
      /*  9116 */ "146, 146, 0, 146, 146, 146, 146, 146, 146, 146, 103570, 118930, 131218, 146, 146, 146, 146, 146",
      /*  9134 */ "146, 146, 9592, 146, 146, 146, 489, 146, 146, 146, 146, 199, 199, 199, 199, 224, 224, 224, 199, 224",
      /*  9154 */ "224, 224, 224, 224, 224, 224, 224, 146, 0, 0, 146, 146, 0, 0, 293, 0, 0, 0, 293, 0, 0, 0, 0, 0, 0",
      /*  9179 */ "279, 0, 0, 282, 0, 0, 0, 4241, 4241, 0, 146, 88210, 146, 146, 146, 146, 146, 146, 146, 146, 146",
      /*  9200 */ "146, 146, 146, 133, 9592, 0, 407, 146, 0, 410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 682, 683, 0",
      /*  9226 */ "703, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 146, 146",
      /*  9248 */ "146, 146, 146, 146, 146, 555, 146, 0, 0, 130, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0",
      /*  9275 */ "0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 146, 146, 165, 146, 146, 0, 130, 0, 0, 146, 146, 146, 165",
      /*  9301 */ "146, 0, 0, 0, 0, 0, 153, 0, 146, 146, 146, 146, 146, 0, 0, 0, 168, 146, 146, 146, 146, 146, 0, 0",
      /*  9325 */ "165, 165, 165, 0, 146, 0, 146, 0, 146, 146, 0, 146, 165, 146, 165, 146, 0, 0, 0, 0, 134, 8455, 7432",
      /*  9348 */ "0, 0, 5387, 146, 0, 0, 0, 395, 165, 165, 165, 165, 146, 146, 146, 165, 146, 146, 146, 254, 254, 254",
      /*  9370 */ "254, 254, 146, 94766, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 476",
      /*  9389 */ "146, 0, 400, 401, 0, 146, 0, 146, 0, 0, 0, 0, 0, 0, 86016, 0, 0, 0, 0, 0, 426, 0, 0, 0, 0, 146, 146",
      /*  9416 */ "146, 146, 146, 146, 0, 146, 146, 146, 146, 661, 146, 146, 146, 0, 146, 86162, 146, 146, 146, 146, 0",
      /*  9437 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 357, 146, 146, 146, 146, 0, 677, 0, 0, 0, 146, 0",
      /*  9459 */ "0, 0, 0, 0, 0, 684, 146, 146, 146, 146, 225, 225, 225, 146, 225, 225, 251, 225, 225, 225, 225, 225",
      /*  9481 */ "5387, 146, 0, 0, 0, 0, 273, 0, 0, 0, 279, 282, 0, 0, 0, 146, 174, 0, 146, 174, 0, 150, 174, 174",
      /*  9505 */ "174, 0, 0, 192, 146, 146, 146, 146, 322, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 701, 0, 146",
      /*  9528 */ "146, 146, 146, 146, 146, 83090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135, 0, 104594, 146, 146",
      /*  9553 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 673, 146, 146, 146, 183, 146, 142",
      /*  9573 */ "146, 142, 146, 146, 142, 146, 146, 146, 146, 146, 146, 146, 107666, 146, 146, 146, 146, 146, 146",
      /*  9592 */ "146, 146, 621, 146, 623, 146, 146, 146, 146, 625, 146, 146, 146, 146, 226, 226, 226, 242, 226, 226",
      /*  9612 */ "226, 226, 226, 226, 226, 226, 0, 0, 0, 261, 133, 134, 8455, 7432, 0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0",
      /*  9637 */ "0, 0, 0, 0, 0, 287, 0, 0, 146, 146, 0, 292, 0, 294, 0, 0, 0, 297, 298, 299, 0, 0, 0, 0, 133, 0, 0",
      /*  9664 */ "0, 0, 23552, 0, 0, 0, 0, 0, 0, 0, 30720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28672, 0, 0, 0, 0, 0, 146",
      /*  9692 */ "146, 319, 146, 146, 323, 324, 325, 146, 146, 0, 0, 0, 0, 0, 0, 102400, 0, 0, 0, 0, 0, 0, 0, 146",
      /*  9716 */ "146, 146, 358, 146, 146, 146, 368, 146, 146, 146, 146, 146, 146, 133, 9592, 146, 146, 146, 0, 146",
      /*  9736 */ "315, 319, 146, 146, 146, 146, 146, 146, 146, 382, 146, 0, 0, 0, 0, 134, 8455, 7432, 0, 0, 5387, 146",
      /*  9758 */ "0, 0, 394, 0, 0, 0, 0, 133, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 130, 0, 0, 0, 385, 0, 0, 0",
      /*  9787 */ "0, 134, 8455, 7432, 390, 0, 5387, 146, 392, 0, 0, 0, 0, 0, 0, 148695, 0, 148695, 148695, 0, 148695",
      /*  9808 */ "148695, 148695, 148695, 148695, 0, 0, 0, 148695, 0, 0, 0, 0, 0, 0, 0, 0, 76800, 0, 0, 0, 0, 146",
      /*  9830 */ "146, 146, 0, 0, 398, 0, 0, 0, 279, 0, 0, 282, 0, 0, 0, 146, 146, 0, 0, 0, 0, 111616, 0, 0, 0, 0, 0",
      /*  9857 */ "0, 59392, 0, 0, 0, 146, 146, 146, 6597, 146, 455, 146, 146, 146, 458, 146, 146, 146, 463, 146, 0, 0",
      /*  9879 */ "0, 0, 134, 8455, 7432, 0, 391, 5387, 146, 0, 0, 0, 0, 0, 274, 0, 0, 279, 282, 0, 0, 0, 146, 146",
      /*  9903 */ "93330, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 154770, 146, 146, 146",
      /*  9922 */ "143506, 146, 481, 146, 146, 146, 9592, 146, 146, 146, 146, 146, 146, 146, 146, 146, 632, 146, 146",
      /*  9941 */ "146, 146, 637, 146, 401, 0, 0, 146, 146, 0, 146, 146, 515, 0, 0, 0, 0, 0, 0, 0, 400, 0, 401, 0, 0",
      /*  9966 */ "106496, 106642, 146, 0, 522, 0, 524, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 146, 146",
      /*  9989 */ "532, 533, 146, 146, 146, 146, 146, 146, 539, 146, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 152722",
      /* 10010 */ "152722, 0, 0, 0, 146, 577, 146, 146, 146, 146, 9797, 146, 146, 146, 146, 0, 0, 0, 588, 0, 0, 0, 0",
      /* 10033 */ "133, 134, 8455, 7432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 610, 146, 146, 146, 146",
      /* 10059 */ "146, 146, 146, 146, 146, 615, 616, 0, 0, 146, 146, 146, 6597, 146, 146, 146, 146, 146, 146, 459",
      /* 10079 */ "146, 146, 146, 146, 0, 716, 0, 146, 719, 146, 0, 0, 0, 146, 146, 146, 0, 0, 146, 146, 146, 146, 146",
      /* 10102 */ "146, 351, 146, 146, 146, 158866, 146, 9797, 146, 146, 146, 643, 0, 0, 0, 0, 0, 0, 0, 400, 0, 401, 0",
      /* 10125 */ "596, 0, 146, 146, 0, 0, 400, 401, 0, 146, 648, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81920, 0, 0, 0, 0",
      /* 10151 */ "400, 146, 146, 146, 146, 146, 707, 146, 146, 146, 0, 0, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 146",
      /* 10173 */ "146, 146, 146, 146, 146, 462, 146, 146, 0, 146, 146, 146, 77970, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 10198 */ "0, 4241, 0, 0, 0, 167, 167, 146, 0, 167, 146, 0, 167, 167, 0, 0, 0, 184, 0, 195, 146, 146, 146, 184",
      /* 10222 */ "146, 0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 146, 108690, 146, 146, 146, 146, 146",
      /* 10242 */ "146, 146, 146, 487, 146, 146, 146, 146, 146, 146, 146, 146, 146, 327, 0, 0, 0, 330, 0, 0, 146, 146",
      /* 10264 */ "146, 146, 227, 227, 227, 146, 247, 247, 247, 227, 227, 227, 227, 227, 0, 0, 0, 0, 305, 0, 0, 0, 0",
      /* 10287 */ "0, 0, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 146, 146, 146, 146, 146, 461, 146, 146, 146, 0, 0",
      /* 10309 */ "678, 69632, 0, 69778, 0, 0, 0, 0, 0, 0, 146, 146, 0, 0, 388, 0, 134, 8455, 7432, 0, 0, 5387, 146, 0",
      /* 10333 */ "393, 0, 0, 0, 0, 0, 24576, 0, 24576, 24576, 0, 24576, 24576, 0, 24576, 24576, 24576, 24576, 0, 0",
      /* 10353 */ "24576, 24576, 24576, 0, 24576, 24576, 24576, 0, 397, 0, 0, 0, 0, 279, 0, 0, 282, 47104, 0, 0, 146",
      /* 10374 */ "405, 0, 0, 0, 0, 133, 134, 8455, 7432, 0, 0, 0, 0, 0, 89088, 0, 0, 0, 0, 0, 30720, 0, 0, 0, 0, 0",
      /* 10400 */ "30720, 0, 0, 0, 0, 0, 0, 279, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 528, 0, 529, 0, 105472, 0, 146, 146",
      /* 10426 */ "146, 0, 0, 0, 424, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 146, 146, 0, 146, 146, 146, 146, 146, 662",
      /* 10450 */ "146, 146, 146, 146, 146, 439, 146, 146, 146, 0, 0, 424, 0, 0, 0, 0, 0, 0, 0, 33792, 0, 0, 0, 0, 0",
      /* 10475 */ "0, 0, 0, 0, 0, 0, 146, 146, 146, 6597, 454, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0",
      /* 10498 */ "446, 0, 448, 0, 146, 146, 146, 482, 146, 146, 146, 9592, 146, 146, 146, 146, 146, 146, 146, 146",
      /* 10518 */ "146, 633, 146, 146, 146, 140434, 146, 146, 146, 146, 146, 146, 9797, 146, 146, 642, 146, 0, 0, 0, 0",
      /* 10539 */ "0, 0, 0, 146, 146, 146, 146, 146, 0, 0, 0, 0, 146, 146, 146, 146, 146, 0, 0, 0, 400, 401, 647, 146",
      /* 10563 */ "0, 649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4241, 4241, 4241, 4241, 4241, 4241, 146, 156818, 146, 146, 0",
      /* 10586 */ "0, 0, 146, 146, 146, 0, 0, 0, 146, 146, 146, 0, 0, 146, 146, 146, 146, 146, 349, 146, 146, 200, 200",
      /* 10609 */ "200, 185, 146, 0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 146, 139410, 146, 146, 146",
      /* 10629 */ "146, 146, 146, 133, 9592, 200, 200, 200, 200, 228, 228, 228, 200, 228, 228, 228, 255, 255, 255, 255",
      /* 10649 */ "255, 0, 146, 146, 409, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40960, 0, 146, 639, 146, 146, 9797",
      /* 10675 */ "146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 604, 0, 0, 0, 0, 0, 0, 146, 146, 146, 0, 146, 190, 146",
      /* 10700 */ "190, 146, 146, 190, 146, 146, 146, 146, 146, 146, 146, 152722, 146, 146, 146, 146, 146, 146, 146",
      /* 10719 */ "146, 563, 146, 146, 146, 146, 146, 146, 146, 146, 146, 123026, 146, 146, 146, 146, 146, 146, 146",
      /* 10738 */ "146, 146, 146, 229, 229, 229, 243, 229, 229, 229, 229, 229, 229, 229, 229, 5387, 146, 269, 0, 271",
      /* 10758 */ "0, 0, 0, 0, 276, 279, 282, 0, 0, 0, 146, 175, 0, 146, 175, 0, 0, 175, 175, 175, 185, 0, 146, 0, 0",
      /* 10783 */ "0, 338, 146, 146, 0, 0, 146, 343, 146, 345, 146, 146, 350, 146, 0, 0, 0, 0, 150, 0, 0, 146, 146",
      /* 10806 */ "146, 146, 146, 0, 0, 0, 0, 146, 146, 146, 146, 146, 0, 150, 146, 89234, 146, 0, 146, 345, 146, 343",
      /* 10828 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 668, 146, 146, 146, 146, 146, 146, 146, 386, 0, 0, 389",
      /* 10849 */ "134, 8455, 7432, 0, 0, 5387, 146, 0, 0, 0, 0, 0, 0, 275, 0, 279, 282, 0, 0, 0, 146, 146, 146, 438",
      /* 10873 */ "146, 440, 146, 146, 0, 386, 0, 0, 0, 0, 0, 0, 0, 400, 400, 401, 401, 0, 0, 146, 146, 0, 146, 146",
      /* 10897 */ "466, 146, 146, 468, 469, 146, 470, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 446, 0, 448",
      /* 10919 */ "337, 146, 146, 146, 483, 146, 146, 146, 9592, 146, 146, 460, 146, 146, 101844, 146, 146, 146, 0",
      /* 10938 */ "146, 146, 146, 146, 146, 320, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146",
      /* 10960 */ "6597, 146, 146, 146, 549, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 14781, 13645, 17855, 16719",
      /* 10980 */ "11600, 0, 142336, 0, 0, 0, 593, 0, 400, 0, 401, 0, 0, 0, 146, 597, 0, 0, 0, 0, 133, 134, 8455, 7432",
      /* 11004 */ "0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 166, 0, 166, 0, 0, 166, 162816, 0, 162816, 0, 162816, 0, 146, 146",
      /* 11028 */ "611, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 146, 146, 146, 0, 0, 0, 146, 146, 146, 146",
      /* 11050 */ "146, 142482, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 374, 146, 133, 9592",
      /* 11069 */ "146, 146, 146, 626, 146, 146, 146, 146, 631, 146, 146, 146, 146, 146, 146, 146, 0, 146, 146, 146",
      /* 11089 */ "146, 146, 146, 146, 146, 146, 146, 146, 384, 146, 146, 146, 146, 9797, 146, 146, 146, 146, 0, 0",
      /* 11109 */ "645, 0, 0, 0, 0, 0, 0, 279, 0, 0, 282, 0, 0, 403, 404, 146, 0, 0, 400, 401, 0, 146, 0, 146, 0, 650",
      /* 11135 */ "0, 0, 652, 0, 0, 0, 0, 0, 0, 279, 0, 0, 282, 0, 402, 0, 146, 146, 0, 0, 0, 0, 0, 414, 0, 416, 0, 0",
      /* 11163 */ "0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 0, 146, 0, 0, 146, 0, 0, 0, 0, 0, 0, 183, 142, 146, 0, 656, 146",
      /* 11190 */ "146, 146, 657, 146, 0, 146, 146, 146, 146, 146, 146, 146, 146, 146, 614, 146, 0, 0, 0, 146, 146",
      /* 11211 */ "146, 675, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 146, 177, 0, 146, 177, 0, 0, 177, 177, 177, 0, 0",
      /* 11237 */ "146, 146, 146, 146, 687, 146, 146, 146, 146, 146, 146, 146, 146, 692, 146, 146, 146, 0, 0, 699, 0",
      /* 11258 */ "0, 0, 0, 0, 146, 146, 146, 146, 146, 146, 367, 146, 146, 146, 146, 146, 146, 146, 133, 9592, 146",
      /* 11279 */ "146, 146, 714, 0, 0, 0, 146, 146, 146, 0, 0, 0, 146, 146, 146, 0, 0, 146, 146, 146, 346, 348, 146",
      /* 11302 */ "146, 146, 0, 168, 172, 146, 176, 172, 146, 176, 172, 172, 176, 176, 176, 0, 0, 196, 201, 201, 201",
      /* 11323 */ "0, 146, 0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 365, 146, 146, 146, 146, 146, 146",
      /* 11344 */ "146, 133, 9592, 201, 201, 201, 201, 146, 146, 146, 201, 196, 250, 196, 146, 146, 146, 146, 146, 146",
      /* 11364 */ "366, 146, 146, 146, 146, 146, 146, 146, 133, 9592, 258, 0, 0, 0, 133, 134, 8455, 7432, 0, 0, 0, 0",
      /* 11386 */ "0, 0, 0, 138240, 0, 0, 0, 0, 306, 0, 0, 311, 312, 0, 0, 0, 0, 314, 146, 146, 146, 0, 146, 146, 146",
      /* 11411 */ "370, 146, 146, 146, 146, 146, 380, 146, 146, 146, 0, 146, 146, 355, 146, 146, 146, 318, 146, 146",
      /* 11431 */ "146, 381, 383, 353, 146, 146, 359, 360, 363, 146, 146, 146, 146, 146, 146, 146, 146, 133, 9592, 146",
      /* 11451 */ "146, 377, 0, 146, 346, 146, 146, 146, 146, 353, 146, 379, 146, 359, 146, 0, 0, 0, 0, 151, 151, 0",
      /* 11473 */ "146, 146, 146, 146, 146, 0, 0, 0, 718, 146, 146, 0, 721, 0, 146, 146, 146, 0, 0, 0, 0, 425, 0, 0, 0",
      /* 11498 */ "0, 0, 146, 431, 432, 146, 146, 146, 0, 146, 0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146",
      /* 11520 */ "146, 9592, 107666, 146, 146, 146, 146, 146, 146, 146, 443, 0, 406, 0, 0, 0, 0, 0, 0, 0, 146, 146",
      /* 11542 */ "146, 6597, 146, 146, 146, 456, 146, 146, 146, 146, 146, 146, 464, 0, 146, 146, 146, 6597, 146, 547",
      /* 11562 */ "146, 146, 146, 146, 146, 146, 554, 146, 556, 146, 146, 146, 207, 146, 0, 146, 0, 146, 146, 0, 146",
      /* 11583 */ "146, 146, 146, 146, 146, 442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10377, 0, 0, 0, 0, 0, 146, 0, 0, 146",
      /* 11609 */ "146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 300, 146, 0, 493, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0",
      /* 11638 */ "401, 0, 0, 0, 268, 268, 0, 401, 0, 0, 146, 146, 0, 146, 514, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0",
      /* 11665 */ "0, 153, 0, 0, 0, 146, 84114, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 146, 146, 146, 0",
      /* 11688 */ "0, 0, 722, 146, 146, 146, 146, 146, 146, 9797, 146, 641, 146, 146, 0, 0, 0, 0, 0, 0, 0, 146, 146",
      /* 11711 */ "146, 146, 146, 0, 0, 129, 146, 146, 146, 146, 688, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146",
      /* 11732 */ "146, 0, 0, 14781, 15902, 17855, 18975, 146, 146, 146, 146, 230, 230, 230, 146, 230, 230, 230, 230",
      /* 11751 */ "230, 230, 230, 230, 0, 259, 0, 0, 133, 134, 8455, 7432, 0, 0, 0, 0, 0, 0, 0, 0, 429, 107520, 146",
      /* 11774 */ "146, 146, 146, 146, 146, 5387, 146, 0, 0, 0, 272, 0, 0, 0, 0, 279, 282, 0, 0, 0, 146, 339, 146, 0",
      /* 11798 */ "0, 146, 146, 146, 146, 146, 146, 146, 146, 667, 133266, 146, 146, 146, 670, 146, 146, 146, 146, 0",
      /* 11818 */ "0, 146, 291, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 146, 146, 0, 0, 303",
      /* 11847 */ "0, 307, 309, 0, 0, 0, 0, 0, 0, 0, 0, 146, 316, 317, 146, 146, 321, 146, 146, 146, 146, 146, 146, 0",
      /* 11871 */ "0, 307, 309, 331, 0, 0, 0, 0, 133, 134, 8455, 7432, 0, 0, 0, 57344, 0, 0, 0, 0, 0, 0, 427, 0, 0, 0",
      /* 11897 */ "146, 146, 146, 146, 146, 146, 0, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 366, 146",
      /* 11917 */ "354, 146, 146, 146, 146, 146, 146, 370, 146, 146, 146, 146, 146, 133, 9592, 0, 146, 146, 146, 6597",
      /* 11937 */ "442, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 541, 0, 0, 0, 0, 146, 146, 146, 146, 536",
      /* 11959 */ "146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 146, 146, 161, 146, 146, 0, 0, 131, 557, 146, 146",
      /* 11982 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147602, 146, 0, 0, 0, 130, 0, 0, 130, 146",
      /* 12003 */ "146, 146, 146, 146, 0, 0, 0, 0, 146, 146, 146, 146, 146, 0, 151, 576, 146, 146, 579, 146, 146, 9797",
      /* 12025 */ "146, 146, 146, 146, 0, 0, 0, 0, 0, 146, 0, 0, 681, 0, 0, 0, 146, 590, 0, 0, 592, 0, 0, 0, 400, 0",
      /* 12051 */ "401, 0, 0, 0, 146, 146, 598, 609, 146, 146, 146, 146, 146, 111762, 146, 146, 146, 146, 146, 0, 0, 0",
      /* 12073 */ "146, 146, 146, 71680, 0, 91136, 146, 146, 723, 146, 146, 146, 146, 9797, 146, 146, 146, 146, 644, 0",
      /* 12093 */ "0, 0, 0, 0, 0, 0, 35840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 401, 0, 146, 0, 146, 0, 0, 0",
      /* 12121 */ "79872, 0, 0, 0, 0, 0, 0, 215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 279, 282, 0, 0, 0, 0, 0, 146, 146, 146",
      /* 12149 */ "80018, 146, 146, 0, 146, 146, 146, 146, 146, 146, 146, 146, 102546, 146, 146, 0, 0, 0, 146, 0, 146",
      /* 12170 */ "146, 725, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31744, 0, 0, 0, 0, 31744, 0, 0, 0, 0, 131, 0",
      /* 12198 */ "0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 400, 400, 595, 401, 0, 0, 0, 0, 0, 202, 202, 202, 131, 146, 0",
      /* 12224 */ "146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 486, 9592, 146, 146, 146, 146, 146, 146, 146",
      /* 12244 */ "146, 564, 146, 146, 146, 146, 146, 146, 146, 202, 202, 217, 202, 231, 231, 231, 202, 231, 231, 231",
      /* 12264 */ "256, 256, 256, 256, 256, 146, 288, 0, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 420, 0, 48274, 146",
      /* 12289 */ "146, 0, 48274, 146, 146, 146, 48502, 146, 146, 146, 146, 146, 146, 146, 0, 422, 0, 0, 0, 0, 0, 0, 0",
      /* 12312 */ "0, 146, 146, 146, 146, 146, 146, 406, 146, 146, 0, 0, 411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0",
      /* 12338 */ "0, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 45202, 146, 146, 146, 146, 146, 146, 146, 146, 326, 146",
      /* 12359 */ "0, 0, 0, 0, 0, 0, 491, 492, 0, 0, 0, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 401, 0, 0, 0, 4241",
      /* 12387 */ "4241, 0, 401, 0, 0, 146, 146, 0, 146, 146, 0, 516, 0, 0, 0, 0, 0, 0, 0, 36864, 0, 0, 0, 0, 0, 0, 0",
      /* 12414 */ "0, 0, 0, 164864, 0, 0, 0, 0, 0, 146, 146, 534, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0",
      /* 12439 */ "157, 146, 146, 146, 146, 146, 0, 0, 162, 146, 146, 559, 146, 146, 146, 146, 146, 146, 146, 571, 572",
      /* 12460 */ "146, 574, 146, 146, 146, 0, 146, 146, 356, 369, 146, 146, 146, 146, 146, 146, 146, 146, 146, 540, 0",
      /* 12481 */ "0, 0, 0, 0, 0, 146, 146, 146, 146, 9797, 146, 146, 146, 146, 0, 0, 0, 78848, 0, 0, 0, 0, 0, 142, 0",
      /* 12506 */ "0, 0, 0, 0, 0, 0, 146, 0, 0, 146, 0, 0, 0, 0, 0, 0, 182, 0, 146, 146, 146, 146, 0, 54272, 0, 0, 0",
      /* 12533 */ "0, 0, 0, 54418, 146, 146, 63634, 146, 0, 0, 0, 495, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 0, 401, 0, 0",
      /* 12560 */ "0, 146, 146, 0, 134290, 146, 146, 146, 0, 0, 0, 146, 146, 146, 0, 0, 0, 146, 95378, 146, 0, 0, 146",
      /* 12583 */ "146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 400, 146, 146, 146, 146, 232, 232, 232, 146, 232",
      /* 12608 */ "232, 232, 232, 232, 232, 232, 232, 0, 0, 0, 399, 0, 0, 279, 0, 0, 282, 0, 0, 0, 146, 146, 0, 0, 0",
      /* 12633 */ "602, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 149504, 149504, 0, 0, 0, 401, 0, 0, 146, 146, 0, 146, 146, 0",
      /* 12659 */ "0, 517, 0, 0, 0, 520, 0, 0, 0, 0, 133, 134, 8455, 7432, 0, 0, 48128, 0, 0, 0, 0, 0, 0, 216, 0, 216",
      /* 12685 */ "216, 0, 216, 216, 216, 216, 216, 146, 146, 146, 146, 561, 146, 146, 146, 146, 146, 146, 146, 146",
      /* 12705 */ "146, 146, 146, 288, 0, 0, 0, 0, 0, 0, 0, 591, 0, 0, 0, 0, 400, 0, 401, 0, 0, 0, 146, 146, 0, 0, 601",
      /* 12732 */ "0, 0, 0, 0, 0, 605, 0, 0, 0, 0, 0, 0, 132, 0, 134, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 12763 */ "0, 0, 0, 146, 146, 97280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 607, 608, 0, 146, 146, 146, 97426, 146",
      /* 12788 */ "146, 146, 146, 146, 146, 146, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 146, 146, 146, 146, 460, 146",
      /* 12809 */ "146, 146, 146, 146, 146, 159890, 146, 146, 0, 0, 0, 0, 0, 146, 146, 638, 146, 146, 640, 9797, 65682",
      /* 12830 */ "146, 146, 146, 0, 119808, 0, 0, 0, 0, 90112, 128000, 400, 401, 0, 128146, 0, 146, 109568, 0, 0, 0",
      /* 12851 */ "0, 0, 0, 0, 0, 4096, 0, 0, 0, 0, 0, 0, 0, 90767, 146, 146, 109714, 146, 146, 146, 0, 119954, 146",
      /* 12874 */ "61586, 146, 146, 146, 146, 146, 146, 537, 146, 146, 146, 0, 0, 0, 0, 0, 0, 158, 146, 146, 146, 146",
      /* 12896 */ "146, 0, 0, 163, 146, 146, 705, 146, 146, 146, 146, 146, 75922, 62464, 0, 0, 0, 0, 146, 146, 146",
      /* 12917 */ "6597, 146, 146, 146, 146, 146, 146, 146, 553, 146, 146, 146, 0, 0, 0, 0, 75776, 0, 0, 0, 146, 146",
      /* 12939 */ "146, 146, 146, 146, 562, 146, 146, 146, 569, 146, 573, 146, 146, 146, 146, 146, 146, 146, 715, 0",
      /* 12959 */ "717, 146, 146, 146, 0, 0, 0, 146, 146, 146, 0, 0, 146, 146, 344, 146, 146, 146, 146, 146, 0, 146",
      /* 12981 */ "85138, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 146, 0, 0, 0, 147, 147, 146, 0, 147, 146",
      /* 13007 */ "0, 147, 0, 0, 0, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 146, 146, 146, 146, 551, 146, 146, 146",
      /* 13029 */ "146, 146, 146, 9797, 582, 146, 146, 146, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146",
      /* 13053 */ "0, 212, 0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 619, 620, 146, 146, 146, 146, 146",
      /* 13074 */ "146, 146, 146, 146, 471, 146, 146, 146, 146, 146, 146, 146, 146, 146, 218, 233, 233, 233, 212, 248",
      /* 13094 */ "248, 248, 233, 233, 233, 233, 233, 465, 146, 146, 146, 146, 146, 146, 146, 146, 146, 472, 146, 146",
      /* 13114 */ "146, 146, 146, 146, 630, 146, 146, 146, 146, 146, 146, 146, 146, 146, 0, 0, 0, 0, 0, 146, 146, 146",
      /* 13136 */ "146, 146, 484, 146, 146, 146, 9592, 146, 146, 488, 146, 146, 146, 146, 146, 146, 690, 146, 146, 146",
      /* 13156 */ "146, 146, 146, 146, 146, 146, 0, 120832, 0, 0, 0, 146, 146, 401, 0, 0, 146, 146, 0, 146, 146, 0, 0",
      /* 13179 */ "0, 518, 0, 0, 0, 521, 0, 0, 0, 525, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 531, 146, 146, 146, 560",
      /* 13205 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 636, 146, 146, 146, 146, 146, 578, 146",
      /* 13225 */ "146, 146, 9797, 146, 583, 146, 146, 0, 0, 0, 0, 0, 149, 0, 146, 146, 146, 146, 146, 0, 0, 0, 0, 146",
      /* 13249 */ "146, 146, 146, 146, 170, 0, 599, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 146, 146",
      /* 13275 */ "146, 676, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 146, 146, 146, 146, 552",
      /* 13299 */ "146, 146, 146, 146, 146, 362, 364, 146, 146, 371, 146, 146, 146, 375, 133, 9592, 0, 724, 146, 146",
      /* 13319 */ "146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146432, 146, 146, 146, 0, 523, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 13347 */ "0, 0, 146, 146, 146, 146, 146, 435, 146, 146, 146, 186, 146, 0, 146, 0, 146, 146, 0, 146, 146, 146",
      /* 13369 */ "146, 146, 146, 9797, 146, 146, 146, 146, 0, 0, 0, 0, 0, 0, 0, 146, 115858, 146, 146, 146, 146, 146",
      /* 13391 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 87186, 146, 146, 146, 146, 146, 146, 146, 234, 234",
      /* 13410 */ "234, 146, 234, 234, 234, 234, 234, 234, 234, 234, 0, 505, 507, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 13435 */ "0, 0, 0, 146, 146, 146, 0, 149504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 268, 268, 268, 0, 0, 0",
      /* 13463 */ "0, 150528, 0, 0, 0, 0, 0, 0, 150528, 0, 150528, 0, 0, 0, 0, 0, 33792, 0, 33792, 0, 0, 33792, 0, 0",
      /* 13487 */ "0, 0, 0, 0, 0, 42173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 136, 0, 0",
      /* 13517 */ "0, 0, 0, 150528, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 13547 */ "0, 0, 0, 0, 0, 42173, 0, 216, 216, 216, 216, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 0, 428, 0, 0, 146",
      /* 13574 */ "146, 146, 433, 146, 146, 674, 146, 146, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 146, 146, 146, 6597",
      /* 13598 */ "146, 146, 146, 146, 457, 146, 146, 146, 146, 146, 146, 146, 9592, 146, 51346, 146, 146, 146, 146",
      /* 13617 */ "146, 146, 146, 9592, 146, 146, 146, 146, 99474, 146, 146, 146, 146, 146, 146, 146, 146, 689, 146",
      /* 13636 */ "146, 146, 146, 146, 146, 146, 146, 146, 146, 304, 0, 0, 0, 0, 0, 146, 152722, 146, 152722, 152722",
      /* 13656 */ "0, 0, 0, 0, 146, 146, 152722, 146, 152722, 0, 0, 0, 0, 0, 40960, 0, 40960, 0, 0, 40960, 0, 0, 0, 0",
      /* 13680 */ "0, 0, 0, 150772, 0, 0, 0, 0, 0, 0, 0, 0, 149504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152722, 0, 0",
      /* 13707 */ "152722, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 6597, 146, 146, 146, 146, 58514, 550, 146, 146, 146",
      /* 13729 */ "146, 146, 146, 146, 130194, 146, 146, 634, 635, 146, 146, 146, 146, 152722, 152722, 152722, 0, 146",
      /* 13747 */ "0, 146, 0, 146, 146, 0, 146, 146, 146, 146, 146, 146, 9797, 146, 146, 146, 146, 0, 82944, 0, 0, 0",
      /* 13769 */ "0, 0, 337, 146, 146, 146, 0, 0, 146, 146, 146, 146, 146, 146, 146, 146, 708, 146, 0, 0, 0, 0, 0",
      /* 13792 */ "712, 146, 0, 146, 146, 160914, 6597, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 372",
      /* 13811 */ "146, 146, 146, 133, 9592, 146, 146, 146, 146, 580, 146, 9797, 146, 146, 146, 146, 0, 0, 0, 0, 0",
      /* 13832 */ "146, 0, 114688, 0, 0, 0, 0, 146, 153746, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146",
      /* 13853 */ "146, 146, 146, 155794, 146, 146, 146, 0, 213, 0, 213, 0, 213, 213, 0, 213, 213, 213, 213, 213, 146",
      /* 13874 */ "146, 146, 213, 146, 146, 146, 213, 213, 213, 213, 213, 146, 146, 146, 146, 235, 235, 235, 146, 235",
      /* 13894 */ "235, 235, 235, 235, 235, 235, 235, 0, 146, 451, 146, 6597, 146, 146, 146, 146, 146, 146, 146, 146",
      /* 13914 */ "146, 146, 146, 570, 146, 146, 146, 146, 575, 146, 146, 146, 146, 485, 146, 146, 9592, 146, 146, 146",
      /* 13934 */ "146, 146, 146, 146, 146, 9592, 146, 146, 146, 146, 146, 146, 146, 146, 146, 566, 146, 146, 146, 146",
      /* 13954 */ "146, 146, 695, 146, 146, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 146, 146, 146, 9797, 146, 146, 146",
      /* 13977 */ "585, 586, 0, 0, 0, 589, 146, 146, 146, 146, 236, 236, 236, 146, 236, 236, 236, 236, 236, 236, 236",
      /* 13998 */ "236, 0, 146, 545, 146, 6597, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 132242, 146",
      /* 14017 */ "146, 146, 146, 146, 146, 146, 146, 0, 214, 0, 214, 0, 214, 214, 0, 214, 214, 214, 214, 214, 146",
      /* 14038 */ "146, 146, 214, 146, 146, 146, 214, 214, 214, 214, 214, 0, 146, 146, 452, 6597, 146, 146, 146, 146",
      /* 14058 */ "146, 146, 146, 146, 146, 146, 146, 135314, 146, 146, 146, 146, 146, 0, 0, 0, 0, 161792, 0, 0",
      /* 14078 */ "161792, 0, 161792, 161792, 161792, 161792, 0, 0, 161792, 0, 0, 0, 161792, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 14100 */ "0, 151, 0, 0, 151, 151, 0, 161792, 161792, 161792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161792, 0, 0",
      /* 14125 */ "0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150528, 0, 0, 0, 161792, 161792, 161792, 161792, 0, 0, 0, 161792, 0",
      /* 14148 */ "0, 0, 0, 0, 0, 0, 0, 505, 400, 507, 401, 0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
      /* 14178 */ "166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164864, 164864, 0, 164864, 164864, 164864, 164864, 164864, 0",
      /* 14199 */ "164864, 164864, 164864, 0, 0, 0, 0, 0, 164864, 164864, 0, 0, 0, 0, 164864, 0, 0, 0, 164864, 164864",
      /* 14219 */ "164864, 164864, 0, 0, 0, 164864, 164864, 164864, 164864, 0, 0, 0, 0, 0, 0, 164864, 0, 0, 164864, 0",
      /* 14239 */ "164864, 0"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 14241; ++i) {TRANSITION[i] = Integer.parseInt(s2[i]);}
  }

  private static final int EXPECTED[] = new int[1817];
  static
  {
    final String s1[] =
    {
      /*    0 */ "3, 131, 244, 260, 266, 264, 270, 274, 278, 282, 286, 665, 290, 306, 374, 391, 318, 380, 379, 324",
      /*   20 */ "309, 312, 524, 333, 337, 389, 387, 366, 343, 794, 339, 337, 389, 349, 368, 355, 360, 389, 389, 364",
      /*   40 */ "372, 378, 389, 351, 389, 384, 320, 395, 398, 855, 408, 519, 602, 654, 412, 416, 420, 424, 629, 852",
      /*   60 */ "429, 433, 437, 442, 446, 482, 849, 702, 738, 471, 454, 810, 921, 313, 459, 466, 476, 470, 573, 475",
      /*   80 */ "313, 480, 637, 313, 752, 691, 675, 403, 804, 401, 804, 487, 313, 692, 404, 313, 493, 497, 501, 505",
      /*  100 */ "509, 513, 881, 528, 712, 532, 522, 668, 832, 536, 540, 722, 296, 544, 551, 302, 313, 556, 560, 564",
      /*  120 */ "299, 750, 462, 314, 568, 709, 547, 572, 588, 313, 577, 581, 516, 890, 585, 595, 599, 606, 610, 481",
      /*  140 */ "450, 488, 648, 871, 614, 618, 622, 448, 489, 769, 835, 626, 327, 635, 641, 645, 658, 662, 591, 672",
      /*  160 */ "888, 679, 864, 651, 683, 687, 696, 690, 719, 345, 924, 706, 766, 716, 726, 904, 732, 742, 746, 756",
      /*  180 */ "760, 901, 449, 313, 728, 631, 819, 773, 777, 781, 785, 789, 793, 798, 825, 552, 748, 842, 329, 763",
      /*  200 */ "802, 808, 313, 356, 817, 878, 313, 814, 293, 823, 313, 829, 878, 438, 839, 735, 313, 483, 846, 425",
      /*  220 */ "861, 313, 313, 857, 868, 455, 875, 699, 885, 313, 313, 894, 911, 313, 914, 898, 908, 918, 313, 313",
      /*  240 */ "313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 751",
      /*  260 */ "1111, 928, 932, 936, 942, 944, 946, 946, 946, 939, 954, 947, 951, 958, 1104, 967, 973, 1106, 977",
      /*  279 */ "969, 946, 1101, 981, 990, 994, 1001, 998, 1005, 1009, 1013, 1024, 1112, 1612, 1196, 1112, 1302, 1416",
      /*  297 */ "1322, 1191, 1387, 1749, 1360, 1112, 1020, 1396, 1414, 1200, 1025, 1743, 1112, 1040, 1050, 1198, 1112",
      /*  314 */ "1112, 1112, 1112, 1136, 1059, 1031, 1648, 1648, 1025, 1197, 1025, 1497, 1053, 1112, 1076, 1112, 1112",
      /*  331 */ "1235, 1738, 1648, 1649, 1439, 1057, 1647, 1034, 1648, 1648, 1199, 1063, 1447, 1801, 1112, 1112, 1051",
      /*  348 */ "1072, 1648, 1036, 1649, 1112, 1025, 1196, 1199, 1112, 1112, 1112, 1153, 1802, 1648, 1648, 1796, 1648",
      /*  365 */ "1080, 1025, 1112, 1112, 1401, 1070, 1198, 1086, 1799, 1112, 1112, 1089, 1197, 1802, 1649, 1648, 1648",
      /*  382 */ "1648, 1082, 1649, 1112, 1196, 1648, 1035, 1648, 1648, 1648, 1648, 1199, 1330, 1648, 1196, 1199, 1802",
      /*  399 */ "1093, 1192, 1112, 1088, 1415, 1112, 1112, 1112, 1656, 1110, 1810, 1123, 1152, 1161, 1165, 1169, 1178",
      /*  416 */ "1027, 1182, 1204, 1208, 1212, 1215, 1195, 986, 1425, 1112, 1112, 1112, 1172, 1242, 1112, 1323, 1370",
      /*  433 */ "1226, 1112, 1112, 1306, 1233, 1112, 1112, 1112, 1228, 1239, 1671, 1248, 1257, 1263, 1681, 1194, 1112",
      /*  450 */ "1112, 1074, 1112, 1112, 1287, 1112, 1112, 1112, 1253, 1323, 1112, 1292, 1112, 1118, 1411, 1415, 1193",
      /*  467 */ "1112, 1323, 1375, 1301, 1112, 1112, 1112, 1282, 1216, 1112, 1112, 1112, 1283, 1600, 1193, 1112, 1112",
      /*  484 */ "1112, 1416, 1112, 1043, 1112, 1112, 1681, 1112, 1543, 1585, 1316, 1601, 1547, 984, 1112, 1437, 985",
      /*  501 */ "1328, 1580, 1477, 1272, 1355, 1783, 1781, 1334, 1336, 1636, 1638, 1640, 1344, 1348, 1352, 1112, 1118",
      /*  518 */ "1464, 1112, 1129, 1251, 1419, 1145, 1112, 1112, 1197, 1648, 1599, 1026, 1112, 1516, 1390, 1112, 1359",
      /*  535 */ "1329, 1374, 1381, 1481, 1512, 1319, 1052, 961, 1601, 1749, 1359, 1329, 1418, 1189, 1430, 1361, 1288",
      /*  552 */ "1112, 1112, 1112, 1671, 1400, 1377, 1470, 1318, 1265, 1468, 1602, 1513, 1405, 1453, 1419, 1190, 1376",
      /*  569 */ "1460, 1320, 1424, 1417, 1112, 1112, 1112, 1749, 1451, 1319, 1424, 1433, 1458, 1187, 1430, 1185, 1474",
      /*  586 */ "1420, 1485, 1118, 1443, 1415, 1112, 1131, 1438, 1338, 1111, 1112, 1375, 1453, 1490, 1485, 1119, 1112",
      /*  603 */ "1135, 1297, 1143, 1494, 1529, 1508, 1383, 1520, 1530, 1522, 1526, 1551, 1552, 1502, 1500, 1504, 1436",
      /*  620 */ "1437, 1486, 1556, 1559, 1563, 1565, 963, 1603, 1018, 1418, 1510, 1112, 1112, 1130, 1653, 1278, 1578",
      /*  637 */ "1112, 1112, 1310, 1415, 1437, 1112, 1305, 1540, 1193, 1112, 1075, 1112, 1137, 1545, 1193, 1074, 1680",
      /*  654 */ "1112, 1141, 1149, 1158, 1111, 1112, 1136, 1545, 1302, 1710, 1604, 1112, 1174, 1017, 1112, 1019, 1365",
      /*  671 */ "1369, 1026, 1622, 1418, 1112, 1193, 1112, 1594, 1117, 1675, 1589, 1598, 1543, 1112, 1709, 1603, 1018",
      /*  688 */ "1112, 1131, 1112, 1195, 1112, 1112, 1112, 1512, 1339, 1603, 1659, 1112, 1222, 1789, 1112, 1270, 1112",
      /*  705 */ "1192, 1303, 1711, 1622, 1112, 1295, 1515, 1407, 1416, 1322, 1066, 1195, 1112, 1112, 1673, 1695, 1592",
      /*  722 */ "1112, 1295, 1514, 1406, 1696, 1312, 1112, 1112, 1415, 1112, 1680, 1303, 1620, 1112, 1304, 1661, 1112",
      /*  739 */ "1322, 1112, 1276, 1303, 1606, 1112, 1052, 1628, 1741, 1112, 1112, 1419, 1112, 1112, 1112, 1747, 1681",
      /*  756 */ "1051, 1075, 1633, 1306, 1018, 1259, 1749, 1112, 1322, 1750, 1112, 1340, 1605, 1112, 1303, 1569, 1604",
      /*  773 */ "1668, 1665, 1764, 1192, 1679, 1244, 1706, 1760, 1762, 1703, 1046, 1685, 1688, 1692, 1700, 1715, 1719",
      /*  790 */ "1723, 1727, 1731, 1734, 1112, 1112, 1112, 1802, 1130, 1303, 1417, 1321, 1154, 1112, 1112, 1112, 1446",
      /*  807 */ "1112, 1305, 1661, 1112, 1112, 1466, 1624, 1229, 1754, 1745, 1112, 1418, 1112, 1112, 1479, 1537, 1320",
      /*  824 */ "1112, 1112, 1112, 1748, 1112, 1153, 1112, 1419, 1112, 1426, 1454, 1112, 1130, 1112, 1438, 1778, 1771",
      /*  841 */ "1745, 1112, 1469, 1574, 1304, 1469, 1758, 1112, 1112, 1512, 1112, 1324, 1112, 1220, 1112, 1098, 1112",
      /*  858 */ "1112, 1113, 1775, 1768, 1629, 1112, 1112, 1513, 1113, 1610, 1788, 1112, 1112, 1112, 1534, 1094, 1467",
      /*  875 */ "1787, 1745, 1112, 1112, 1572, 1303, 1112, 1392, 1112, 1266, 1112, 1793, 1112, 1112, 1584, 1112, 1112",
      /*  892 */ "1376, 1453, 1113, 1112, 1115, 1113, 1806, 1809, 1812, 1112, 1644, 1306, 1112, 1376, 1194, 1616, 1114",
      /*  909 */ "1125, 1812, 1116, 1115, 1112, 1809, 1112, 1811, 1812, 1813, 1112, 1112, 1112, 1681, 1194, 1112, 1111",
      /*  926 */ "1136, 1545, 0, 8388608, 0, 8388612, 8388616, 192, 8389120, 12582912, 272629760, 276824064, 545259520",
      /*  939 */ "8388608, 28, 8388800, 8389120, 281018368, 545259520, 545259520, 8388608, 8388608, 8388608, 8388608",
      /*  950 */ "0, 220, 8388636, 8388636, 8388636, 8388800, 3932160, 281018368, 28, 1350566080, 12320768, 8388608",
      /*  962 */ "32768, 0, 0, 5120, 0, 268435484, 545259520, 8388608, 8388608, 8388828, 8388608, 8388608, 1082130652",
      /*  975 */ "8388828, 545259548, 679477248, 8388608, 8388608, 301990108, 8388828, 8388828, 310378716, 8388608",
      /*  985 */ "65544, 0, 0, 0, 16384, 549453340, -1400639488, 293601020, -326897664, 838860540, 301989628",
      /*  996 */ "-54267904, 838860540, 301989628, 301989628, 301989628, 301989628, 838860540, 301989628, -234881284",
      /* 1005 */ "268435484, 268435676, 268435676, -4, 276824092, 276824284, 276824284, 272629468, -1841299748",
      /* 1014 */ "-759169316, -1832911140, -759169316, 512, 4194304, 0, 0, 0, 6, 2048, 16, 24, 0, 0, 0, 8, 4, 24, 24",
      /* 1033 */ "16777216, 32, 24, 24, 24, 256, 24, 2097152, 524288, 524288, 1048576, 0, 67108864, 536870912, 1024",
      /* 1048 */ "1048576, 536870912, 262144, 262144, 0, 0, 0, 16, 24, 28672, 196608, 229376, 3072, 3584, 24, 24576",
      /* 1064 */ "16384, 196608, 131072, 0, 1, 1136, 2097152, 1048576, 1048576, 0, 0, 2097152, 0, 0, 0, 5242880, 256",
      /* 1081 */ "24, 24, 24, 4, 256, 0, 2097152, 1048576, 0, 0, 67108864, 0, 24, 0, 268435456, 0, 268435456, 1, 128",
      /* 1100 */ "16384, 8388608, 8388608, 746586112, 8388828, 220, 8388636, 301989916, 1350566080, 276824256, 16",
      /* 1111 */ "268435456, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2048, 268435456, 16, 16384, 0, 1, 0, 1, 16, 0, 0, 0, 64, 0",
      /* 1135 */ "268500992, 0, 0, 0, 128, 0, 0, 16401, 1064960, 1064960, 0, 0, 1, 1392, 0, 524288, 1064960, 4, 16384",
      /* 1154 */ "0, 0, 0, 31, 524292, 1064960, 1048576, 524308, 524309, 1107300352, 17393, 1048576, 524292, 524308",
      /* 1168 */ "524308, 1376063488, 0, 17395, 0, 3, 4, 8, 128, 64, 17403, 0, 0, 17403, 1032, 524288, 524292, 524288",
      /* 1186 */ "0, 8192, 0, 0, 524288, 131072, 0, 0, 0, 1048576, 0, 0, 0, 24, 24, 0, 0, 24, 524292, 761268224",
      /* 1206 */ "761268224, 761300992, 541695, 762333184, 762365952, 762333184, -1386084352, -1386084350, -1386084350",
      /* 1215 */ "-1386084350, 268435456, 0, 0, 1048576, 4096, 1107296256, 0, 0, 4, 32, 262144, 1375731712, 0, 0, 7, 8",
      /* 1232 */ "32, 6291456, 754974720, 0, 0, 15, 160, 0, 34816, 0, 64, 512, 0, 1048576, 0, 1048576, 0, 18432",
      /* 1250 */ "7340032, 0, 4, 0, 0, 1, 4, 0, 51200, 0, 0, 16, 524288, 133120, -1392508928, 0, 0, 16, 8388608, 32768",
      /* 1270 */ "4096, 33554432, 1073741824, 0, 73728, 1074266112, 262144, 1342177280, 0, 0, 50, 768, 2048, 2097152",
      /* 1284 */ "4194304, 16777216, 67108864, 738197504, 0, 0, 0, 368, 0, 33554432, 1073741824, 0, 8, 0, 0, 16401",
      /* 1300 */ "8192, 671088640, 0, 0, 0, 1024, 0, 0, 0, 2048, 2097152, 4194304, 67108864, 134217728, 1073741824",
      /* 1315 */ "-2147483648, 32768, 65536, 65536, 0, 0, 4096, 0, 0, 0, 524288, 0, 0, 65544, 1073741824, 0, 0, 0",
      /* 1333 */ "28672, 73728, -2122316431, 0, 4194304, 0, 0, 1024, 4096, 0, 0, 1009801350, 4268032, 2083543046",
      /* 1347 */ "2083543174, 2084067334, 1010063366, 1010063366, 1010063366, 1010063878, 1010063878, 0, 65536, 73728",
      /* 1357 */ "1074397184, 1074429952, 0, 32768, 131072, 524288, 1073741824, 0, 6144, 16384, 1048576, 69206016",
      /* 1369 */ "939524096, 0, 0, 0, 69632, 2013265920, 0, 0, 0, 262144, 0, 0, 1572864, 0, 0, 262144, 32, 64, 1, 112",
      /* 1389 */ "1024, 25165824, -2147483648, 0, 0, 4096, 4194304, 4096, 16384, 1048576, 67108864, 128, 0, 0, 0",
      /* 1404 */ "2097152, 8, 65536, 1073741824, 0, 512, 0, 4096, 16384, 1048576, 402653184, 536870912, 0, 0, 0, 8192",
      /* 1420 */ "0, 0, 0, 96, 16, 8388608, 0, 0, 0, 134, 1, 112, 25165824, 0, 8, 0, 256, 0, 256, 0, 0, 0, 24576, 4096",
      /* 1444 */ "16384, 1048576, 268435456, 1048576, 0, 0, 24, 262144, 0, 512, 0, 0, 0, 4194304, 8, 0, 512, 0, 65536",
      /* 1463 */ "0, 4096, 268435456, 0, 0, 32768, 0, 0, 0, 512, 0, 8, 256, 8, 512, 32768, 0, 1073741824, 0, 0, 518, 0",
      /* 1485 */ "16777216, 0, 0, 0, 4196360, 256, 512, 0, 96, 0, 262144, 512, 0, 8, 128, 64, 256, 5120, 4196360",
      /* 1504 */ "4196360, 4196360, 1056832, 0, 2048, 268435456, 0, 0, 65536, 0, 0, 0, 256, 8, 65536, 0, 16777216",
      /* 1521 */ "2048, 268435456, 262144, 64, 2048, 262144, 2048, 2048, 0, 32, 64, 16777216, 2048, 0, 268435584, 0",
      /* 1537 */ "1024, 0, 8192, 0, 55, -276037632, 0, 128, 128, 268435456, 0, 0, 65536, 32768, 1024, 5120, 0, 4196360",
      /* 1555 */ "5120, 4196360, 5244936, 4196360, -276085966, -276085966, 4196616, -276080846, -276084942, -276080846",
      /* 1565 */ "-275823817, -275823817, -275823817, 0, 32768, 0, 5120, 0, 512, 2097152, 268435456, 0, 0, 212992",
      /* 1579 */ "-276299776, 0, 0, 65544, 0, 5242880, 0, 0, 0, 8388624, 65536, 131072, 524288, 260046848, -1073741824",
      /* 1594 */ "0, 0, 67108864, 134217728, -536870912, 0, 0, 0, 33554432, 0, 0, 8, 2048, 4194304, 8192, 1048576, 20",
      /* 1611 */ "262144, 0, 0, 2621440, 1310720, 2097152, 0, 0, 268435456, 32768, 0, 2048, 4194304, 0, 0, 131072",
      /* 1627 */ "-1409286144, 524288, 16777216, 33554432, 67108864, 134217728, 0, 32768, 2048, 4194304, 0, 65536, 0",
      /* 1640 */ "73728, 73728, 1009801222, 1009801222, 2097152, 0, 0, 2048, 24, 24, 24, 24, 0, 131072, 536870912, 0",
      /* 1656 */ "0, 4096, 65536, 4194304, 0, 8192, 0, 4096, 0, 0, 536870912, 0, 0, 12288, 536879104, 0, 16384, 0, 0",
      /* 1675 */ "16, 32, 768, 16384, 1310720, 0, 0, 0, 268435456, 0, 1024, 536879104, 536870912, 537001984, 16384",
      /* 1690 */ "-2147483648, 536879104, 537919488, 538050560, 538181632, 16384, 65536, 131072, 524288, 50331648",
      /* 1700 */ "270533120, -2147483648, 270598144, -2147483648, 1024, 1024, 1310720, -2147483648, 0, 1024, 0, 32768",
      /* 1712 */ "4096, 0, 8, 270598144, 270598144, -2147483648, 1344339968, 270598144, 1344339968, 270598144",
      /* 1722 */ "1881210880, 807469056, 807469056, 807469056, 807470080, 264276399, 264276399, 264276399, -1338048000",
      /* 1731 */ "264277423, 264277423, 264277423, 534809023, 534809023, 534809023, 534809023, 2304, 32768, 130023424",
      /* 1741 */ "134217728, -2147483648, 0, 0, 134217728, 0, 0, 0, -2147483648, 0, 0, 0, 3328, 256, 2048, 32768",
      /* 1757 */ "130023424, 2097152, 0, 1024, 0, 0, 1310720, 0, 536879104, 12288, 0, 32, 256, 4194304, 8388608",
      /* 1772 */ "16777216, 33554432, 67108864, 2, 4, 8, 32, 256, 32768, 4194304, 1074429952, 73728, 73728, 73728",
      /* 1786 */ "-2122316687, 32, 4194304, 16777216, 33554432, 134217728, 0, 4, 16777216, 33554432, 0, 16384, 131072",
      /* 1799 */ "24, 0, 24, 0, 24, 24, 24, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1"
    };
    String[] s2 = java.util.Arrays.toString(s1).replaceAll("[ \\[\\]]", "").split(",");
    for (int i = 0; i < 1817; ++i) {EXPECTED[i] = Integer.parseInt(s2[i]);}
  }

  private static final String TOKEN[] =
  {
    "EPSILON",
    "END",
    "IRI_REF",
    "PNAME_NS",
    "PNAME_LN",
    "BLANK_NODE_LABEL",
    "VAR1",
    "VAR2",
    "LANGTAG",
    "INTEGER",
    "DECIMAL",
    "DOUBLE",
    "INTEGER_POSITIVE",
    "DECIMAL_POSITIVE",
    "DOUBLE_POSITIVE",
    "INTEGER_NEGATIVE",
    "DECIMAL_NEGATIVE",
    "DOUBLE_NEGATIVE",
    "STRING_LITERAL1",
    "STRING_LITERAL2",
    "STRING_LITERAL_LONG1",
    "STRING_LITERAL_LONG2",
    "'()'",
    "WS",
    "'[]'",
    "'!'",
    "'!='",
    "'&&'",
    "'('",
    "')'",
    "'*'",
    "'+'",
    "','",
    "'-'",
    "'.'",
    "'/'",
    "';'",
    "'<'",
    "'<='",
    "'='",
    "'>'",
    "'>='",
    "'?'",
    "'ABS'",
    "'ADD'",
    "'ALL'",
    "'AS'",
    "'ASC'",
    "'ASK'",
    "'AVG'",
    "'BASE'",
    "'BIND'",
    "'BINDINGS'",
    "'BNODE'",
    "'BOUND'",
    "'BY'",
    "'CEIL'",
    "'CLEAR'",
    "'COALESCE'",
    "'CONCAT'",
    "'CONSTRUCT'",
    "'CONTAINS'",
    "'COPY'",
    "'COUNT'",
    "'CREATE'",
    "'DATATYPE'",
    "'DAY'",
    "'DEFAULT'",
    "'DELETE'",
    "'DELETE DATA'",
    "'DELETE WHERE'",
    "'DESC'",
    "'DESCRIBE'",
    "'DISTINCT'",
    "'DROP'",
    "'ENCODE_FOR_URI'",
    "'EXISTS'",
    "'FILTER'",
    "'FLOOR'",
    "'FROM'",
    "'GRAPH'",
    "'GROUP'",
    "'GROUP_CONCAT'",
    "'HAVING'",
    "'HOURS'",
    "'IF'",
    "'IN'",
    "'INSERT'",
    "'INSERT DATA'",
    "'INTO'",
    "'IRI'",
    "'LANG'",
    "'LANGMATCHES'",
    "'LCASE'",
    "'LIMIT'",
    "'LOAD'",
    "'MAX'",
    "'MD5'",
    "'MIN'",
    "'MINUS'",
    "'MINUTES'",
    "'MONTH'",
    "'MOVE'",
    "'NAMED'",
    "'NOT'",
    "'NOW'",
    "'OFFSET'",
    "'OPTIONAL'",
    "'ORDER'",
    "'PREFIX'",
    "'RAND'",
    "'REDUCED'",
    "'REGEX'",
    "'ROUND'",
    "'SAMPLE'",
    "'SECONDS'",
    "'SELECT'",
    "'SEPARATOR'",
    "'SERVICE'",
    "'SHA1'",
    "'SHA224'",
    "'SHA256'",
    "'SHA384'",
    "'SHA512'",
    "'SILENT'",
    "'STR'",
    "'STRDT'",
    "'STRENDS'",
    "'STRLANG'",
    "'STRLEN'",
    "'STRSTARTS'",
    "'SUBSTR'",
    "'SUM'",
    "'TIMEZONE'",
    "'TO'",
    "'TZ'",
    "'UCASE'",
    "'UNDEF'",
    "'UNION'",
    "'URI'",
    "'USING'",
    "'WHERE'",
    "'WITH'",
    "'YEAR'",
    "'['",
    "']'",
    "'^'",
    "'^^'",
    "'a'",
    "'false'",
    "'isBLANK'",
    "'isIRI'",
    "'isLITERAL'",
    "'isNUMERIC'",
    "'isURI'",
    "'sameTerm'",
    "'true'",
    "'{'",
    "'|'",
    "'||'",
    "'}'"
  };
}

// End
